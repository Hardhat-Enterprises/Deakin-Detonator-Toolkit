import os, sys, getopt
import shodan
import json # Import json for pretty printing search results

parameter_list = sys.argv[1:]
# Added -e for endpoint and -q for query
options = "h:k:i:e:q:"
long_options = ["Help", "Shodan Key", "IP Address", "Endpoint", "Query"]

shodan_key = ''
host_ip = ''
endpoint = 'host' # Default endpoint
query = '' # Default empty query

try:
    # Updated getopt to include new options
    opts, args = getopt.getopt(parameter_list, options, long_options)
except getopt.GetoptError:
    print("Follow instructions below: ")
    # Updated help message
    print('shodkey.py -k <shodan key> [-i <IP address>] [-e <endpoint>] [-q <query>]')
    print('Endpoints: host, host/count, host/search, host/search/facets, host/search/tokens')
    print('Use -i for host endpoint, -q for search/count/tokens endpoints')
    sys.exit(2)

for opt, arg in opts:
    if opt == '-h':
        print('shodkey.py -k <shodan key> [-i <IP address>] [-e <endpoint>] [-q <query>]')
        print('Endpoints: host, host/count, host/search, host/search/facets, host/search/tokens')
        print('Use -i for host endpoint, -q for search/count/tokens endpoints')
        sys.exit()
    elif opt in ("-k", "--Shodan Key"):
        shodan_key = arg
    elif opt in ("-i", "--IP Address"):
        host_ip = arg
    elif opt in ("-e", "--Endpoint"):
        endpoint = arg.lower() # Store endpoint in lowercase
    elif opt in ("-q", "--Query"):
        query = arg

# Validate required parameters based on endpoint
if not shodan_key:
    print("Error: Shodan API key is required.")
    sys.exit(2)

if endpoint == 'host' and not host_ip:
    print("Error: IP address is required for 'host' endpoint.")
    sys.exit(2)

if endpoint in ['host/count', 'host/search', 'host/search/facets', 'host/search/tokens'] and not query:
     print(f"Error: Search query is required for '{endpoint}' endpoint.")
     sys.exit(2)


print('Key: (hidden)') # Don't print the actual key
if host_ip:
    print('Host IP: ', host_ip)
print('Endpoint: ', endpoint)
if query:
    print('Query: ', query)

api = shodan.Shodan(shodan_key)

try:
    # Call the appropriate API method based on the endpoint
    if endpoint == 'host':
        print("Fetching host information...")
        host = api.host(host_ip)
        print("-------------------------------------------------------------------------")
        print("Organisation:", host.get('org', 'n/a'))
        print("IP Address:", host.get('ip_str', 'n/a'))
        print("Country Name:", host.get('country_name', 'n/a'))
        print("Domains:", host.get('domains', 'n/a'))
        print("Host Name:", host.get('hostnames', 'n/a'))
        print("Operating System:", host.get('os','n/a'))
        print("-------------------------------------------------------------------------")
        if 'data' in host:
            for item in host ['data']:
                print("""
        * Product: {}
        * Port: {}
        * Transport: {}""".format(item.get('product', 'n/a'), item.get('port', 'n/a'), item.get('transport', 'n/a')))

        print("\nLast Shodan Scan:", host.get('last_update', 'n/a'))

    elif endpoint == 'host/count':
        print(f"Fetching count for query: '{query}'...")
        count_result = api.count(query)
        print("-------------------------------------------------------------------------")
        print("Total results:", count_result.get('total', 'n/a'))
        # You can also print facets if available, though the dedicated endpoint is below
        if 'facets' in count_result:
             print("Facets:")
             print(json.dumps(count_result['facets'], indent=2))
        print("-------------------------------------------------------------------------")

    elif endpoint == 'host/search':
        print(f"Searching for query: '{query}'...")
        search_results = api.search(query)
        print("-------------------------------------------------------------------------")
        print("Total results:", search_results.get('total', 'n/a'))
        print("Matches:")
        # Print matches in a readable format
        if 'matches' in search_results:
            for match in search_results['matches']:
                print(f"  IP: {match.get('ip_str', 'n/a')}")
                print(f"  Port: {match.get('port', 'n/a')}")
                print(f"  Organization: {match.get('org', 'n/a')}")
                print(f"  OS: {match.get('os', 'n/a')}")
                print(f"  Product: {match.get('product', 'n/a')}")
                print(f"  Transport: {match.get('transport', 'n/a')}")
                print(f"  Banner Snippet:\n{match.get('data', 'n/a')[:200]}...") # Print first 200 chars of banner
                print("-" * 20) # Separator for matches
        print("-------------------------------------------------------------------------")

    elif endpoint == 'host/search/facets':
        print(f"Fetching facets for query: '{query}'...")
        facets = ['country', 'org', 'port', 'os']
        search_results_with_facets = api.search(query, facets=facets)
        print("-------------------------------------------------------------------------")
        print("Facets for query:", query)
        if 'facets' in search_results_with_facets:
            print(json.dumps(search_results_with_facets['facets'], indent=2))
        else:
            print("No facets found or requested.")
        print("-------------------------------------------------------------------------")


    elif endpoint == 'host/search/tokens':
        print(f"Parsing search query tokens for: '{query}'...")
        tokens_result = api.search_tokens(query)
        print("-------------------------------------------------------------------------")
        print("Search Query Tokens:")
        if 'attributes' in tokens_result:
             print("Attributes:")
             print(json.dumps(tokens_result['attributes'], indent=2))
        if 'errors' in tokens_result:
             print("Errors:")
             print(json.dumps(tokens_result['errors'], indent=2))
        if 'filters' in tokens_result:
             print("Filters:")
             print(json.dumps(tokens_result['filters'], indent=2))
        if 'string' in tokens_result:
             print("Normalized Query String:", tokens_result['string'])
        print("-------------------------------------------------------------------------")

    else:
        print(f"Error: Unknown endpoint '{endpoint}'. Supported endpoints: host, host/count, host/search, host/search/facets, host/search/tokens")


except shodan.APIError as e:
    print(f'Shodan API Error: {e}')
except Exception as e:
    print(f'An unexpected error occurred: {e}')

