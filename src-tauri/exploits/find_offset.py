import argparse

from pwn import *


def find_offset(binary, count):
    elf = context.binary = ELF(binary[0])

    is64bit = False

    log.info(f"Binary: {binary}")
    log.info(f"Arch: {elf.arch}")

    num_bytes = 0

    if elf.arch == "amd64" or elf.arch == "arm64":
        num_bytes = 8
        is64bit = True
    elif elf.arch == "i386":
        num_bytes = 4

    p = elf.process()
    p.sendline(cyclic(count, n=num_bytes))
    p.wait()

    core = p.corefile

    if is64bit:
        offset = cyclic_find(core.read(core.rsp, num_bytes), n=num_bytes)
        log.info(f"[+] Offset for RIP @ {offset}")
    else:
        offset = cyclic_find(core.read(core.esp, num_bytes), n=num_bytes)
        log.info(f"[+] Offset for EIP @ {offset}")


parser = argparse.ArgumentParser(
    description="Find the overflow offset of a binary.")

parser.add_argument("binary", type=str,
                    help="Path to the binary to test overflow", nargs=1, action="store")
parser.add_argument("--count", type=int, default=200,
                    help="Number of chars to send, defaults to 200", action="store", required=False)

args = parser.parse_args()

find_offset(args.binary, args.count)
