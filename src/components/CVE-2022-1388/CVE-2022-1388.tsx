import { Button, LoadingOverlay, NumberInput, Stack, TextInput } from "@mantine/core";
import { useForm } from "@mantine/form";
import { useCallback, useEffect, useState } from "react";
import { CommandHelper } from "../../utils/CommandHelper";
import ConsoleWrapper from "../ConsoleWrapper/ConsoleWrapper";
import { Child, Command } from "@tauri-apps/api/shell";
import { IconDoorExit } from "@tabler/icons";
import { RenderComponent } from "../UserGuide/UserGuide";
import { SaveOutputToTextFile_v2 } from "../SaveOutputToFile/SaveOutputToTextFile"; //v2
import { checkAllCommandsAvailability } from "../../utils/CommandAvailability";
import InstallationModal from "../InstallationModal/InstallationModal";

/**
 * FormValues defines the structure of the object used to hold form state for network configuration.
 *
 * @field hostIP: The IP address of the host machine.
 * @field targetIP: The IP address of the target machine.
 * @field hostPort: The port number on the host machine used for communication.
 */
interface FormValuesType {
    hostIP: string;
    targetIP: string;
    authtoken: string;
}
// The title displayed in the user guide and form header
const title = "CVE-2022-1388";
// Description used to inform the user about the exploit
const description =
    "On F5 BIG-IP 16.1.x versions prior to 16.1.2.2, 15.1.x versions prior to 15.1.5.1, 14.1.x versions prior to 14.1.4.6, 13.1.x versions prior to 13.1.5, and all 12.1.x and 11.6.x versions undisclosed requests may bypass iControl REST authentication.\n";

const steps =
    "Step 1: Enter Host IP.\n" +
    "Step 2: Enter a Target IP.\n" +
    "Step 3: Enter X-F5-Authentication token.\n" +
    "Step 4: Click Exploit to commence the exploits operation.\n" +
    "Step 5: View the Output block below to view the results of the attack vectors execution.\n";

const sourceLink = "https://github.com/PsychoSec2/CVE-2022-1388-POC"; // Link to the source code.

const tutorial = ""; //Link to the official tutorial.
const dependencies = [""]; // Contains the dependencies required by the component.

export function CVE20221388() {
    // State to manage the loading indicator visibility
    const [loading, setLoading] = useState(false);
    // State to store the handle of the spawned command process
    const [handle, setHandle] = useState<Child | null>(null);
    // State to store the command output
    const [output, setOutput] = useState("");
    // State to store the first status message
    const [text1, setText1] = useState<string | null>(null);
    // State to store the second status message
    const [text2, setText2] = useState<string | null>(null);
    // State to manage whether saving the output to a file is allowed
    const [allowSave, setAllowSave] = useState(false);
    // State to track if the output has been saved
    const [hasSaved, setHasSaved] = useState(false);

    const [pid, setPid] = useState("");
    // State variable to store the process ID of the command execution.

    const [loadingModal, setLoadingModal] = useState(true);
    // State variable to indicate loading state of the modal.
    const [isCommandAvailable, setIsCommandAvailable] = useState(false);
    // State variable to check if the command is available.
    const [opened, setOpened] = useState(!isCommandAvailable);
    // State variable that indicates if the modal is opened.

    // Initialize the form with default values
    let form = useForm({
        initialValues: {
            targetIP: "",
            hostIP: "",
            authtoken: "",
        },
    });

    // Check if the command is available and set the state variables accordingly.
    useEffect(() => {
        // Check if the command is available and set the state variables accordingly.
        checkAllCommandsAvailability(dependencies)
            .then((isAvailable) => {
                setIsCommandAvailable(isAvailable); // Set the command availability state
                setOpened(!isAvailable); // Set the modal state to opened if the command is not available
                setLoadingModal(false); // Set loading to false after the check is done
            })
            .catch((error) => {
                console.error("An error occurred:", error);
                setLoadingModal(false); // Also set loading to false in case of error
            });
    }, []);

    /**
     * Handles incoming data from a child process and appends it to the current output state.
     * @param {string} data - The string data recieved from the child process.
     */
    const handleProcessData = useCallback((data: string) => {
        setOutput((prevOutput) => prevOutput + "\n" + data); // Append new data to the previous output.
    }, []);
    /**
     * handleProcessTermination: Callback to handle the termination of the child process.
     * Once the process termination is handled, it clears the process PID reference and
     * deactivates the loading overlay.
     * @param {object} param - An object containing information about the process termination.
     * @param {number} param.code - The exit code of the terminated process.
     * @param {number} param.signal - The signal code indicating how the process was terminated.
     */
    const handleProcessTermination = useCallback(
        ({ code, signal }: { code: number; signal: number }) => {
            // If the process was successful, display a success message.
            if (code === 0) {
                handleProcessData("\nProcess completed successfully.");
                // If the process was terminated manually, display a termination message.
            } else if (signal === 15) {
                handleProcessData("\nProcess was manually terminated.");
                // If the process was terminated with an error, display the exit and signal codes.
            } else {
                handleProcessData(`\nProcess terminated with exit code: ${code} and signal code: ${signal}`);
            }
            // Clear the child process pid reference. There is no longer a valid process running.
            setPid("");
            // Cancel the Loading Overlay. The process has completed.
            setLoading(false);
        },
        [handleProcessData],
    );

    /**
     * Handles form submission, executes the exploit command, and updates the output state.
     *
     * @param values - The form values containing host IP, target IP, and host port.
     */
    const onSubmit = async (values: FormValuesType) => {
        setLoading(true);

        // Disallow saving until the tool's execution is complete
        setAllowSave(false);

        // Define the command arguments to be executed
        const args = [
            "./exploits/CVE-2022-1388.py",
            "-H",
            values.hostIP,
            "-u",
            values.targetIP,
            "-a",
            values.authtoken,
            "-t",
        ];

        CommandHelper.runCommandGetPidAndOutput("python3", args, handleProcessData, handleProcessTermination)
            .then(({ output, pid }) => {
                // Update the UI with the results from the executed command
                setOutput(output);
                console.log(pid);
                setPid(pid);
            })
            .catch((error) => {
                // Display any errors encountered during command execution
                setOutput(error.message);
                // Deactivate loading state
                setLoading(false);
                // Activate AllowSave to generate output results.
                setAllowSave(true);
            });

        setText1(text1);

        setOutput(output);
        setLoading(false);
        setAllowSave(true);
    };

    /**
     * Kills the currently running exploit command if there is one.
     */
    const killHandle = async () => {
        if (handle) {
            await handle.kill();
            setHandle(null);
            setText1(null);
            setText2(null);
        }
    };

    /**
     * Clears the output and resets save states.
     */
    const clearOutput = useCallback(() => {
        setOutput("");
        setHasSaved(false);
        setAllowSave(false);
    }, [setOutput]);

    /**
     * Callback for handling the completion of the output save operation.
     * Resets the save state to prevent duplicate saving.
     */
    const handleSaveComplete = () => {
        // Indicating that the file has saved which is passed
        // back into SaveOutputToTextFile to inform the user
        setHasSaved(true);
        setAllowSave(false);
    };
    /**
     * Sends a SIGTERM signal to the child process to request a graceful termination.
     */
    const handleCancel = () => {
        if (pid !== null) {
            const args = [`-15`, pid];
            CommandHelper.runCommand("kill", args);
        }
    };

    return (
        <RenderComponent
            title={title}
            description={description}
            steps={steps}
            tutorial={tutorial}
            sourceLink={sourceLink}
        >
            <form onSubmit={form.onSubmit((values) => onSubmit(values))}>
                <LoadingOverlay visible={loading} />
                {loading && (
                    <div>
                        <Button variant="outline" color="red" style={{ zIndex: 1001 }} onClick={handleCancel}>
                            Cancel
                        </Button>
                    </div>
                )}
                <Stack>
                    <TextInput label={"Host IP"} required {...form.getInputProps("hostIP")} />
                    <TextInput label={"Target IP"} required {...form.getInputProps("targetIP")} />
                    <TextInput label={"X-F5-Auth-Token"} required {...form.getInputProps("authtoken")} />
                    <Button type={"submit"}>Exploit</Button>
                    {SaveOutputToTextFile_v2(output, allowSave, hasSaved, handleSaveComplete)}
                    <ConsoleWrapper output={output} clearOutputCallback={clearOutput} />
                </Stack>
            </form>
        </RenderComponent>
    );
}

// Default export of the CVE202224112 component
export default CVE20221388;
