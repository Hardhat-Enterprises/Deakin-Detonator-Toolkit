import { Button, Stack, TextInput, Group, Switch } from "@mantine/core";
import { useForm } from "@mantine/form";
import { useCallback, useState } from "react";
import { CommandHelper } from "../../utils/CommandHelper";
import ConsoleWrapper from "../ConsoleWrapper/ConsoleWrapper";
import { UserGuide } from "../UserGuide/UserGuide";
import { SaveOutputToTextFile_v2 } from "../SaveOutputToFile/SaveOutputToTextFile";
import { LoadingOverlayAndCancelButton } from "../OverlayAndCancelButton/OverlayAndCancelButton";

const title = "Fuzz Faster U Fool (ffuf)";
const description_userguide =
    "ffuf is a web directory and resource discovery tool. It takes a wordlist " +
    "and uses a brute force fuzzing technique against a target URL to attempt to discover valid files " +
    "and directories. This can reveal vulnerabilities in web applications as well generally data-mine " +
    "and map out the target. ffuf can even be used to brute force credentials used in web authentication.\n\n" +
    "For further information on ffuf: https://github.com/ffuf/ffufS\n\n" +
    "Wordlist directory: /usr/share/ddt/ffuf_wordlists/\n\n" +
    "Basic ffuf brute force discovery:\n\n" +
    "Step 1: Enter a URL to be fuzzed\n" +
    "       E.g. http://www.example.com/FUZZ\n\n" +
    "Step 2: Optionally enter a wordlist other than the default\n" +
    "       E.g. wordlist.txt\n\n" +
    "Step 3: Optionally enter extensions to be added to words. Comma separated." +
    "\n         E.g. .html,.php,.txt" +
    "\n\nStep 4: Click Scan to commence the ffuf operation.\n\n" +
    "Step 5: View the Output block below to view the results of the Scan.";

interface FormValuesType {
    wordlist: string;
    url: string;
    output: string;
    filtersize: string;
    extensions: string;
    filterwords: string;
    filterlines: string;
}

const FfufTool = () => {
    const [loading, setLoading] = useState(false);
    const [output, setOutput] = useState("");
    const [checkedStopWhen, setCheckedStopWhen] = useState(false);
    const [checkedVerboseOutput, setCheckedVerboseOutput] = useState(false);
    const [checkedAdvanced, setCheckedAdvanced] = useState(false);
    const [pid, setPid] = useState("");
    const [allowSave, setAllowSave] = useState(false);
    const [hasSaved, setHasSaved] = useState(false);

    let form = useForm({
        initialValues: {
            wordlist: "",
            url: "",
            output: "",
            filtersize: "",
            extensions: "",
            filterwords: "",
            filterlines: "",
        },
    });

    // Uses the callback function of runCommandGetPidAndOutput to handle and save data
    // generated by the executing process into the output state variable.
    const handleProcessData = useCallback((data: string) => {
        setOutput((prevOutput) => prevOutput + "\n" + data); // Update output
    }, []);

    // Uses the onTermination callback function of runCommandGetPidAndOutput to handle
    // the termination of that process, resetting state variables, handling the output data,
    // and informing the user.
    const handleProcessTermination = useCallback(
        ({ code, signal }: { code: number; signal: number }) => {
            if (code === 0) {
                handleProcessData("\nProcess completed successfully.");
            } else if (signal === 15) {
                handleProcessData("\nProcess was manually terminated.");
            } else {
                handleProcessData(`\nProcess terminated with exit code: ${code} and signal code: ${signal}`);
            }
            // Clear the child process pid reference
            setPid("");
            // Cancel the Loading Overlay
            setLoading(false);

            // Allow Saving as the output is finalised
            setAllowSave(true);
            setHasSaved(false);
        },
        [handleProcessData]
    );

    // Actions taken after saving the output
    const handleSaveComplete = () => {
        // Indicating that the file has saved which is passed
        // back into SaveOutputToTextFile to inform the user
        setHasSaved(true);
        setAllowSave(false);
    };

    const onSubmit = async (values: FormValuesType) => {
        // Disallow saving until the tool's execution is complete
        setAllowSave(false);

        // Start the Loading Overlay
        setLoading(true);

        const args = [`-u`, `${values.url}/FUZZ`];

        if (values.wordlist) {
            args.push(`-w`, `/usr/share/ddt/ffuf_wordlists/${values.wordlist}`);
        } else args.push(`-w`, `/usr/share/ddt/ffuf_wordlists/default_SECLIST_wordlist.txt`);

        if (values.extensions) {
            args.push(`-e`, `${values.extensions}`);
        }

        if (values.output) {
            args.push(`-o`, `${values.output}`);
        }

        if (values.filtersize) {
            args.push(`-fs`, `${values.filtersize}`);
        }

        if (values.filterwords) {
            args.push(`-fw`, `${values.filterwords}`);
        }

        if (values.filterlines) {
            args.push(`-fl`, `${values.filterlines}`);
        }

        if (checkedStopWhen) {
            args.push(`-sf`);
        }

        if (checkedVerboseOutput) {
            args.push(`-v`);
        }

        try {
            const result = await CommandHelper.runCommandGetPidAndOutput(
                "ffuf",
                args,
                handleProcessData,
                handleProcessTermination
            );
            setPid(result.pid);
            setOutput(result.output);
        } catch (e: any) {
            setOutput(e.message);
        }
    };

    const clearOutput = useCallback(() => {
        setOutput("");
        setHasSaved(false);
        setAllowSave(false);
    }, [setOutput]);

    return (
        <form onSubmit={form.onSubmit((values) => onSubmit({ ...values }))}>
            {LoadingOverlayAndCancelButton(loading, pid)}
            <Stack>
                {UserGuide(title, description_userguide)}
                <Switch
                    size="md"
                    label="Advanced Mode"
                    checked={checkedAdvanced}
                    onChange={(e) => setCheckedAdvanced(e.currentTarget.checked)}
                />
                <TextInput
                    label={"Target URL"}
                    placeholder={"https://www.example.com"}
                    required
                    {...form.getInputProps("url")}
                />
                <TextInput
                    label={"Wordlist: default is directory-list-2.3-medium.txt by SecLists"}
                    placeholder={"wordlist.txt"}
                    {...form.getInputProps("wordlist")}
                />
                <TextInput label={"Extensions"} placeholder={".html,.txt,.php"} {...form.getInputProps("extensions")} />
                {checkedAdvanced && (
                    <>
                        <TextInput label={"Optional Output File"} {...form.getInputProps("output")} />

                        <TextInput
                            label={"Filter HTTP response size. Comma separated list of sizes and ranges"}
                            {...form.getInputProps("filtersize")}
                        />

                        <TextInput
                            label={
                                "Filter by amount of words in response. Comma separated list of word counts and ranges"
                            }
                            {...form.getInputProps("filterwords")}
                        />

                        <TextInput
                            label={
                                "Filter by amount of lines in response. Comma separated list of line counts and ranges"
                            }
                            {...form.getInputProps("filterlines")}
                        />
                    </>
                )}
                <Group grow>
                    <Switch
                        size="md"
                        label="Stop when > 95% of responses return 403 Forbidden"
                        checked={checkedStopWhen}
                        onChange={(e) => setCheckedStopWhen(e.currentTarget.checked)}
                    />
                    <Switch
                        size="md"
                        label="Verbose Output"
                        checked={checkedVerboseOutput}
                        onChange={(e) => setCheckedVerboseOutput(e.currentTarget.checked)}
                    />
                </Group>
                <Button type={"submit"} style={{ fontSize: "24px", paddingTop: "8px" }}>
                    Scan
                </Button>
                {SaveOutputToTextFile_v2(output, allowSave, hasSaved, handleSaveComplete)}
                <ConsoleWrapper output={output} clearOutputCallback={clearOutput} />
            </Stack>
        </form>
    );
};

export default FfufTool;
