import { Button, Stack, TextInput } from "@mantine/core";
import { useForm } from "@mantine/form";
import { useCallback, useState, useEffect } from "react";
import { CommandHelper } from "../../utils/CommandHelper";
import ConsoleWrapper from "../ConsoleWrapper/ConsoleWrapper";
import { LoadingOverlayAndCancelButton } from "../OverlayAndCancelButton/OverlayAndCancelButton";
import { SaveOutputToTextFile_v2 } from "../SaveOutputToFile/SaveOutputToTextFile";
import { checkAllCommandsAvailability } from "../../utils/CommandAvailability";
import InstallationModal from "../InstallationModal/InstallationModal";
import { RenderComponent } from "../UserGuide/UserGuide";

/**
 * Represents the form values for the Parsero component.
 */
interface FormValuesType {
    url: string;
}

/**
 * The Parsero component.
 * @returns The Parsero component.
 */
const Parsero = () => {
    // State variables
    const [loading, setLoading] = useState(false); // State variable that represents loading state of the component.
    const [output, setOutput] = useState(""); // State variable to store the output of the command execution.
    const [pid, setPid] = useState(""); // State variable to store the process ID of the command execution.
    const [allowSave, setAllowSave] = useState(false); // State variable to allow saving the output to a file.
    const [hasSaved, setHasSaved] = useState(false); // // State variable to indicate if the output has been saved.
    const [isCommandAvailable, setIsCommandAvailable] = useState(false); // State variable to check if the command is available.
    const [opened, setOpened] = useState(!isCommandAvailable); // State variable to check if the installation modal is open.
    const [loadingModal, setLoadingModal] = useState(true); // State variable to indicate loading state for the installation modal.

    // Component Constants
    const title = "Parsero"; // Component title
    const description =
        // Component description
        "Parsero is a free script written in Python which reads the Robots.txt file of a web server and looks at the Disallow entries." +
        "The Disallow entries tell the search engines what directories or files hosted on a web server must not be indexed. ";
    const steps =
        "Step 1: Enter a URL. (E.g. www.google.com)\n" + "Step 2: Click Start Parsero\n" + "Step 3: View Results";
    const sourceLink = "https://www.kali.org/tools/parsero/"; // Link to the source code.
    const tutorial = ""; // Link to the official documentation/tutorial.
    const dependencies = ["parsero"]; // Contains the dependencies required by the component.

    // Form hook to handle input
    let form = useForm({
        initialValues: {
            url: "",
        },
    });

    // Check the availability of all commands in the dependencies array.
    useEffect(() => {
        // Check if the command is available and set the state variables accordingly.
        checkAllCommandsAvailability(dependencies)
            .then((isAvailable) => {
                setIsCommandAvailable(isAvailable); // Set the command availability state.
                setOpened(!isAvailable); // Set the modal state to opened if the command is not available.
                setLoadingModal(false); // Set loading to false after the check is done.
            })
            .catch((error) => {
                console.error("An error occurred:", error);
                setLoadingModal(false); // Also set loading to false in case of error.
            });
    }, []);

    /**
     * Uses the callback function of runCommandGetPidAndOutput to handle and save data
     * generated by the executing process into the output state variable.
     */
    const handleProcessData = useCallback((data: string) => {
        setOutput((prevOutput) => prevOutput + "\n" + data); // Update output
        setAllowSave(true);
    }, []);

    /**
     * Uses the onTermination callback function of runCommandGetPidAndOutput to handle
     * the termination of that process, resetting state variables, handling the output data,
     * and informing the user.
     */
    const handleProcessTermination = useCallback(
        ({ code, signal }: { code: number; signal: number }) => {
            if (code === 0) {
                handleProcessData("\nProcess completed successfully."); // If the process was successful, display a success message.
            } else if (signal === 15) {
                handleProcessData("\nProcess was manually terminated."); // If the process was terminated manually, display a termination message.
            } else {
                handleProcessData(`\nProcess terminated with exit code: ${code} and signal code: ${signal}`); // If the process was terminated with an error, display the exit and signal codes.
            }
            // Clear the child process pid reference.
            setPid("");
            // Cancel the Loading Overlay.
            setLoading(false);
        },
        [handleProcessData]
    );

    /**
     * handleSaveComplete: Recognizes that the output file has been saved.
     * Passes the saved status back to SaveOutputToTextFile_v2.
     */
    const handleSaveComplete = () => {
        // Indicating that the file has saved which is passed back into SaveOutputToTextFile to inform the user.
        setHasSaved(true);
        setAllowSave(false);
    };

    /**
     * onSubmit: Asynchronous handler for the form submission event.
     * It sets up and triggers the Dnsrecon tool with the given parameters.
     * Once the command is executed, the results or errors are displayed in the output.
     * @param {FormValuesType} values - The form values, containing the URL.
     */
    const onSubmit = async (values: FormValuesType) => {
        setAllowSave(false); // Disallow saving until the tool's execution is complete.
        setLoading(true); // Set the loading state to true to indicate that the process is starting.

        const args = [`-u`, values.url];

        // Execute parsero
        CommandHelper.runCommandGetPidAndOutput("parsero", args, handleProcessData, handleProcessTermination)
            .then(({ pid, output }) => {
                // Update the state with the process ID and initial output.
                setPid(pid);
                setOutput(output);
            })
            .catch((error) => {
                setLoading(false);
                setOutput(`Error: ${error.message}`); // If an error occurs during command execution, display the error message.
            });
    };

    /**
     * clearOutput: Callback function to clear the console output.
     * It resets the state variable holding the output, thereby clearing the display.
     */
    const clearOutput = useCallback(() => {
        setOutput("");
        setHasSaved(false);
        setAllowSave(false);
    }, [setOutput]);

    return (
        // Render the UserGuide component with component details
        <RenderComponent
            title={title}
            description={description}
            steps={steps}
            tutorial={tutorial}
            sourceLink={sourceLink}
        >
            {!loadingModal && (
                <InstallationModal
                    isOpen={opened}
                    setOpened={setOpened}
                    feature_description={description}
                    dependencies={dependencies}
                ></InstallationModal>
            )}
            <form onSubmit={form.onSubmit(onSubmit)}>
                {/* Render the loading overlay and cancel button */}
                {LoadingOverlayAndCancelButton(loading, pid)}
                <Stack>
                    <TextInput label={"URL"} required {...form.getInputProps("url")} />
                    <Button type={"submit"}>Start {title}</Button>
                    {SaveOutputToTextFile_v2(output, allowSave, hasSaved, handleSaveComplete)}
                    {/* Render the save output to file component */}
                    <ConsoleWrapper output={output} clearOutputCallback={clearOutput} />
                    {/* Render the console wrapper component */}
                </Stack>
            </form>
        </RenderComponent>
    );
};
export default Parsero;
