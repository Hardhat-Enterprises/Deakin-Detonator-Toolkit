import { Button, Checkbox, LoadingOverlay, Stack, TextInput, Switch } from "@mantine/core";
import { useForm } from "@mantine/form";
import React, { useCallback, useState } from "react";
import { CommandHelper } from "../../utils/CommandHelper";
import ConsoleWrapper from "../ConsoleWrapper/ConsoleWrapper";
import { SaveOutputToTextFile } from "../SaveOutputToFile/SaveOutputToTextFile";
import { UserGuide } from "../UserGuide/UserGuide";

const title = "Deepmagic Information Gathering Tool";
const description_userguide =
    "DMitry is a UNIX/(GNU) Linux command line application written in C. DMitry will scan to try and find " +
    "possible subdomains, email addresses and uptime information, and further perform tcp port scans, and " +
    "whois lookups.\n\nInformation on the tool can be found at: https://www.kali.org/tools/dmitry/\n\n" +
    "Using Dmitry:\n" +
    "Step 1: Enter a valid domain or IP address to be scanned.\n" +
    "       Eg: 192.168.0.1\n\n" +
    "Step 2: Enter a delay between requests. Default is 2 (milliseconds). Can be left blank.\n" +
    "       Eg: 2\n\n" +
    "Step 3: Click Start Scanning to commence Dmirty's operation.\n\n" +
    "Step 4: View the Output block below to view the results of the tools execution.";

interface FormValuesType {
    domain: string;
}

const dmitry = () => {
    const [loading, setLoading] = useState(false);
    const [output, setOutput] = useState("");
    const [pid, setPid] = useState("");
    const [checkedAdvanced, setCheckedAdvanced] = useState(false);
    const [checkedIPAddress, setCheckedIPaddress] = useState(false);
    const [checkedDomainname, setCheckedDomainname] = useState(false);
    const [checkedNetcraft, setCheckedNetcraft] = useState(false);
    const [checkedSubdomains, setCheckedSubdomains] = useState(false);
    const [checkedEmailaddress, setCheckedEmailaddress] = useState(false);
    const [checkedPortscan, setCheckedPortscan] = useState(false);
    const [checkedFiltered, setCheckedFiltered] = useState(false);
    const [checkedBanner, setCheckedBanner] = useState(false);
    const [delay, setDelay] = useState(2);

    const handlePortscanChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const isChecked = e.currentTarget.checked;
        setCheckedPortscan(isChecked);

        if (!isChecked) {
            setCheckedFiltered(false);
            setCheckedBanner(false);
            setDelay(2);
        }
    };

    let form = useForm({
        initialValues: {
            domain: "",
        },
    });

    // Uses the callback function of runCommandGetPidAndOutput to handle and save data
    // generated by the executing process into the output state variable.
    const handleProcessData = useCallback((data: string) => {
        setOutput((prevOutput) => prevOutput + "\n" + data); // Update output
    }, []);

    // Uses the onTermination callback function of runCommandGetPidAndOutput to handle
    // the termination of that process, resetting state variables, handling the output data,
    // and informing the user.
    const handleProcessTermination = useCallback(
        ({ code, signal }: { code: number; signal: number }) => {
            if (code === 0) {
                handleProcessData("\nProcess completed successfully.");
            } else if (signal === 15) {
                handleProcessData("\nProcess was manually terminated.");
            } else {
                handleProcessData(`\nProcess terminated with exit code: ${code} and signal code: ${signal}`);
            }
            // Clear the child process pid reference
            setPid("");
            // Cancel the Loading Overlay
            setLoading(false);
        },
        [handleProcessData]
    );

    // Sends a SIGTERM signal to gracefully terminate the process
    const handleCancel = () => {
        if (pid !== null) {
            const args = [`-15`, pid];
            CommandHelper.runCommand("kill", args);
        }
    };

    const onSubmit = async (values: FormValuesType) => {
        setLoading(true);
        const args = [];

        args.push(...values.domain.split(" "));
        if (checkedIPAddress) {
            args.push("-i");
        }

        if (checkedDomainname) {
            args.push("-w");
        }

        if (checkedNetcraft) {
            args.push("-n");
        }

        if (checkedSubdomains) {
            args.push("-s");
        }

        if (checkedEmailaddress) {
            args.push("-e");
        }

        if (checkedPortscan) {
            args.push("-p");

            if (checkedFiltered) {
                args.push("-f");
            }

            if (checkedBanner) {
                args.push("-b");
            }

            if (delay) {
                args.push("-t", delay.toString());
            }
        }

        try {
            const result = await CommandHelper.runCommandGetPidAndOutput(
                "dmitry",
                args,
                handleProcessData,
                handleProcessTermination
            );
            setPid(result.pid);
            setOutput(result.output);
        } catch (e: any) {
            setOutput(e.message);
        }
    };

    const clearOutput = useCallback(() => {
        setOutput("");
    }, [setOutput]);

    return (
        <form onSubmit={form.onSubmit(onSubmit)}>
            <LoadingOverlay visible={loading} />
            {loading && (
                <div>
                    <Button variant="outline" color="red" style={{ zIndex: 1001 }} onClick={handleCancel}>
                        Cancel
                    </Button>
                </div>
            )}
            <Stack>
                {UserGuide(title, description_userguide)}
                <Switch
                    size="md"
                    label="Advanced Mode"
                    checked={checkedAdvanced}
                    onChange={(e) => setCheckedAdvanced(e.currentTarget.checked)}
                />
                <TextInput label={"Domain or IP"} required {...form.getInputProps("domain")} />

                {checkedAdvanced && (
                    <>
                        <Checkbox
                            label={"Perform a whois lookup on the IP address of a host."}
                            checked={checkedIPAddress}
                            onChange={(e) => setCheckedIPaddress(e.currentTarget.checked)}
                        />
                        <Checkbox
                            label={"Perform a whois lookup on the domain name of a host."}
                            checked={checkedDomainname}
                            onChange={(e) => setCheckedDomainname(e.currentTarget.checked)}
                        />
                        <Checkbox
                            label={"Retrieve Netcraft.com information on a host."}
                            checked={checkedNetcraft}
                            onChange={(e) => setCheckedNetcraft(e.currentTarget.checked)}
                        />
                        <Checkbox
                            label={"Search for a possible subdomains."}
                            checked={checkedSubdomains}
                            onChange={(e) => setCheckedSubdomains(e.currentTarget.checked)}
                        />
                        <Checkbox
                            label={"Perform a search for possible email addresses."}
                            checked={checkedEmailaddress}
                            onChange={(e) => setCheckedEmailaddress(e.currentTarget.checked)}
                        />
                        <Checkbox
                            label={"Perform a TCP port scan"}
                            checked={checkedPortscan}
                            onChange={(e) => setCheckedPortscan(e.currentTarget.checked)}
                        />
                        {checkedPortscan && (
                            <div style={{ marginLeft: "20px" }}>
                                <Checkbox
                                    label={"Perform a TCP port scan showing output reporting filtered ports"}
                                    checked={checkedFiltered}
                                    onChange={(e) => setCheckedFiltered(e.currentTarget.checked)}
                                />
                                <Checkbox
                                    label={"Read in the Banner received from the scanned port"}
                                    checked={checkedBanner}
                                    onChange={(e) => setCheckedBanner(e.currentTarget.checked)}
                                />
                                <TextInput
                                    label={"Delay (in seconds)"}
                                    placeholder={"Set the TTL in seconds when scanning a TCP port (Default 2)"}
                                    type="number"
                                    value={delay}
                                    onChange={(e) => setDelay(parseInt(e.target.value))}
                                />
                            </div>
                        )}
                    </>
                )}

                <Button type={"submit"}>Start Scanning</Button>
                {SaveOutputToTextFile(output)}
                <ConsoleWrapper output={output} clearOutputCallback={clearOutput} />
            </Stack>
        </form>
    );
};

export default dmitry;
