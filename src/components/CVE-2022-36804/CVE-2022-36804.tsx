import React, { useState } from "react";
import { Button, LoadingOverlay, Stack, TextInput } from "@mantine/core";
import { useForm } from "@mantine/form";
import { Command } from "@tauri-apps/api/shell";

import ConsoleWrapper from "../ConsoleWrapper/ConsoleWrapper";
import { UserGuide } from "../UserGuide/UserGuide";

const title = "CVE-2022-36804 Pre-Auth RCE in Atlassian Bitbucket Server Vulnerability Exploit";
const description_userguide = `This script exploits a command injection vulnerability in Atlassian Bitbucket Server.
Refer to https://nvd.nist.gov/vuln/detail/CVE-2022-36804 for more details.

How to use CVE-2022-36804:
Step 1: Enter the domain/IP address of the Bitbucket server.
Step 2: Optionally enter a project key and a repository name for targeted exploitation.
Step 3: Enter a command to execute on the server.
Step 4: If accessing a private repository, specify the session ID.
Step 5: Click 'Exploit' to commence the exploitation operation.
Step 6: View the output below for results.`;

interface FormValues {
    url: string;
    projKey?: string;
    repoKey?: string;
    cmd?: string;
    session?: string;
}

const CVE202236804 = () => {
    const [loading, setLoading] = useState(false); // State to handle the visibility of the loading overlay during the execution process.
    const [output, setOutput] = useState<string>(""); // State to store the output result or errors from the command execution.

    let form = useForm<FormValues>({
        // useForm hook initialization with initial form values for handling form state and submission.
        initialValues: {
            url: "",
            projKey: "",
            repoKey: "",
            cmd: "",
            session: "",
        },
    });

    const onSubmit = async (values: FormValues) => {
        setLoading(true);
        setOutput(""); // Clear previous output

        const args = [
            // Start with the mandatory argument
            "/usr/share/ddt/cve-2022-36804.py",
            "-u",
            values.url,
            // Add optional parameters conditionally
            ...(values.projKey ? ["-p", values.projKey] : []),
            ...(values.repoKey ? ["-r", values.repoKey] : []),
            ...(values.cmd ? ["-c", values.cmd] : []),
            ...(values.session ? ["--session", values.session] : []),
        ];

        try {
            const command = new Command("python3", args);
            const result = await command.execute();
            setOutput(result.stdout); // Update output state with the command's stdout
        } catch (error) {
            setOutput(`Error executing command: ${error}`); // Handle any errors
        }
        setLoading(false);
    };

    return (
        <form onSubmit={form.onSubmit((values) => onSubmit(values))}>
            <LoadingOverlay visible={loading} />
            <Stack>
                {UserGuide(title, description_userguide)}
                <TextInput label={"Domain/IP Address"} required {...form.getInputProps("url")} />
                <TextInput label={"Project Key"} {...form.getInputProps("projKey")} />
                <TextInput label={"Repository Name"} {...form.getInputProps("repoKey")} />
                <TextInput label={"Command to Execute"} {...form.getInputProps("cmd")} />
                <TextInput label={"Session ID (for private repos)"} {...form.getInputProps("session")} />
                <Button type={"submit"}>Exploit</Button>
                <ConsoleWrapper output={output} hideClearButton={true} />
            </Stack>
        </form>
    );
};

export default CVE202236804;
