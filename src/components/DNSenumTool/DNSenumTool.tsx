import { Button, LoadingOverlay, Stack, TextInput, Switch, Checkbox } from "@mantine/core";
import { useForm } from "@mantine/form";
import { useCallback, useState } from "react";
import { CommandHelper } from "../../utils/CommandHelper";
import ConsoleWrapper from "../ConsoleWrapper/ConsoleWrapper";
import { UserGuide } from "../UserGuide/UserGuide";
import { SaveOutputToTextFile_v2 } from "../SaveOutputToFile/SaveOutputToTextFile";

const title = "DNS Enumeration Tool";
const description_userguide =
    "DNSEnum is a command-line tool used for DNS record enumeration. " +
    "It is used to gather information about a specified domain, including subdomains and IP addresses. " +
    "The tool is useful for penetration testers and security researchers, " +
    "as it can help identify potential attack vectors and vulnerabilities in a network. " +
    "DNSEnum supports a variety of DNS record types, including A, MX, NS, and SOA records. " +
    "\n\nYou can find more information about the tool, including usage instructions and examples, " +
    "in its official documentation: https://tools.kali.org/information-gathering/dnsenum\n\n" +
    "Using DNS Enumeration Tool (Basic):\n" +
    "Step 1: Enter a Target Domain.\n" +
    "       Eg: google.com\n\n" +
    "Using DNS Emueration Tool (Advanced):\n" +
    "Step 1: Enter a Target Domain.\n" +
    "Step 2: Select Advanced Mode.\n" +
    "Step 3: Enter the number of threads to use.\n" +
    "Step 4: Enter the number of pages to search.\n" +
    "Step 5: Enter the number of scrapes to perform.\n" +
    "Step 6: Enter the timeout value.\n" +
    "Step 7: Select Reverse Lookup if required.\n";

//list of input values collected by the form
interface FormValuesType {
    domain: string;
    threads: number;
    pages: number;
    scrap: number;
    reverseLookup: boolean;
    timeout: number;
}

const DnsenumTool = () => {
    //sets the state of the tool; loading or not, what the output is
    const [loading, setLoading] = useState(false);
    const [output, setOutput] = useState("");
    const [checkedAdvanced, setCheckedAdvanced] = useState(false);
    const [pid, setPid] = useState("");
    const [allowSave, setAllowSave] = useState(false);
    const [hasSaved, setHasSaved] = useState(false);

    //intial form values
    let form = useForm({
        initialValues: {
            domain: "",
            threads: 10,
            pages: 10,
            scrap: 10,
            reverseLookup: false,
            timeout: 5,
        },
    });

    // Uses the callback function of runCommandGetPidAndOutput to handle and save data
    // generated by the executing process into the output state variable.
    const handleProcessData = useCallback((data: string) => {
        setOutput((prevOutput) => prevOutput + "\n" + data); // Update output
    }, []);
    // Uses the onTermination callback function of runCommandGetPidAndOutput to handle
    // the termination of that process, resetting state variables, handling the output data,
    // and informing the user.
    const handleProcessTermination = useCallback(
        ({ code, signal }: { code: number; signal: number }) => {
            if (code === 0) {
                handleProcessData("\nProcess completed successfully.");
            } else if (signal === 15) {
                handleProcessData("\nProcess was manually terminated.");
            } else {
                handleProcessData(`\nProcess terminated with exit code: ${code} and signal code: ${signal}`);
            }
            // Clear the child process pid reference
            setPid("");
            // Cancel the Loading Overlay
            setLoading(false);

            // Allow Saving as the output is finalised
            setAllowSave(true);
            setHasSaved(false);
        },
        [handleProcessData],
    );
    // Sends a SIGTERM signal to gracefully terminate the process
    const handleCancel = () => {
        if (pid !== null) {
            const args = [`-15`, pid];
            CommandHelper.runCommand("kill", args);
        }
    };

    // Actions taken after saving the output
    const handleSaveComplete = () => {
        // Indicating that the file has saved which is passed
        // back into SaveOutputToTextFile to inform the user
        setHasSaved(true);
        setAllowSave(false);
    };

    //sets the loading state to True, provides arguments for the tool
    const onSubmit = async (values: FormValuesType) => {
        // Disallow saving until the tool's execution is complete
        setAllowSave(false);
        setLoading(true);
        const args = ["--nocolor", `${values.domain}`];

        args.push("-threads", `${values.threads}`);
        args.push("-pages", `${values.pages}`);
        args.push("-scrap", `${values.scrap}`);

        // Conditional. If the user has not specified to conduct a reverse lookup omit reverse lookup argument results.
        if (!values.reverseLookup) {
            args.push("-noreverse");
        }

        args.push("-timeout", `${values.timeout}`);

        //try the dnsenum command with provided arguments, show output if succesful or error message if not.
        try {
            const result = await CommandHelper.runCommandGetPidAndOutput(
                "dnsenum",
                args,
                handleProcessData,
                handleProcessTermination,
            );
            setPid(result.pid);
            setOutput(result.output);
        } catch (e: any) {
            setOutput(e.message);
        }
    };

    //clears output without completely refreshing the tool
    const clearOutput = useCallback(() => {
        setOutput("");
        setHasSaved(false);
        setAllowSave(false);
    }, [setOutput]);

    return (
        //form for the tool, with input fields and submit button
        <form onSubmit={form.onSubmit(onSubmit)}>
            <LoadingOverlay visible={loading} />
            {loading && (
                <div>
                    <Button variant="outline" color="red" style={{ zIndex: 1001 }} onClick={handleCancel}>
                        Cancel
                    </Button>
                </div>
            )}
            <Stack>
                {UserGuide(title, description_userguide)}

                <TextInput label={"Domain"} required {...form.getInputProps("domain")} />
                <Switch
                    size="md"
                    label="Advanced Mode"
                    checked={checkedAdvanced}
                    onChange={(e) => setCheckedAdvanced(e.currentTarget.checked)}
                />
                {checkedAdvanced && (
                    <>
                        <TextInput label={"Threads"} {...form.getInputProps("threads")} />
                        <TextInput label={"Pages"} type="number" min={1} {...form.getInputProps("pages")} />
                        <TextInput label={"Scrap"} {...form.getInputProps("scrap")} />
                        <TextInput label={"Timeout"} {...form.getInputProps("timeout")} />
                        <Switch
                            size="md"
                            label="Reverse Lookup"
                            {...form.getInputProps("reverseLookup" as keyof FormValuesType)}
                        />
                    </>
                )}
                <Button type={"submit"}>Start Enumeration</Button>
                {SaveOutputToTextFile_v2(output, allowSave, hasSaved, handleSaveComplete)}
                <ConsoleWrapper output={output} clearOutputCallback={clearOutput} />
            </Stack>
        </form>
    );
};

export default DnsenumTool;
