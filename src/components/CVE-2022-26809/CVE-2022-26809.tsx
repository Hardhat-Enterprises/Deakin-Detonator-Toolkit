import { Button, Stack, TextInput } from "@mantine/core";
import { useForm } from "@mantine/form";
import { useCallback, useState, useEffect } from "react";
import { CommandHelper } from "../../utils/CommandHelper";
import ConsoleWrapper from "../ConsoleWrapper/ConsoleWrapper";
import { RenderComponent } from "../UserGuide/UserGuide";
import { LoadingOverlayAndCancelButton } from "../OverlayAndCancelButton/OverlayAndCancelButton";
import { checkAllCommandsAvailability } from "../../utils/CommandAvailability";
import InstallationModal from "../InstallationModal/InstallationModal";
import { SaveOutputToTextFile_v2 } from "../SaveOutputToFile/SaveOutputToTextFile";

/**
 * Interface representing the form values for the CVE-2022-26809 exploit.
 * Defines the structure of the form data including URL, project key, repository name, command, and session ID.
 */
interface FormValuesType {
    target: string; // Target IP address
    port: string; // Target port
    payload: string; // Payload to send
}

/**
 * CVE202226809 component 
 * * @returns The CVE-2022-26809 exploit component.
 */
export function CVE202226809() {
    // Component State Variables
    const [loading, setLoading] = useState(false);
    const [output, setOutput] = useState("");
    const [allowSave, setAllowSave] = useState(false);
    const [hasSaved, setHasSaved] = useState(false);
    const [pid, setPid] = useState("");
    const [isCommandAvailable, setIsCommandAvailable] = useState(false);
    const [opened, setOpened] = useState(!isCommandAvailable);
    const [loadingModal, setLoadingModal] = useState(true);

    // Component Constants
    const title = "CVE-2022-26809";
    const description = "CVE-2022-26809 is a vulnerability in Microsoft RPC runtime that executes arbitrary code by sending a crafted RPC request to the Windows RPCSS service.";
    const steps =
        "Step 1: Enter the target IP address.\n" +
        "Step 2: Specify the port (default is 135).\n" +
        "Step 3: Enter the payload to send to the target.\n" +
        "Step 4: Click 'Exploit' to commence the exploitation operation.\n" +
        "Step 5: View the output below for results.";
    const sourceLink = "https://nvd.nist.gov/vuln/detail/CVE-2022-26809";
    const tutorial = "";
    const dependencies = ["python3"];

    // Form hook to handle form input
    let form = useForm({
        initialValues: {
            target: "",
            port: "135", // Default RPC port
            payload: "ExamplePayload", // Default payload
        },
    });

    // Check if the command is available and set the state variables accordingly
    useEffect(() => {
        checkAllCommandsAvailability(dependencies)
            .then((isAvailable) => {
                setIsCommandAvailable(isAvailable);
                setOpened(!isAvailable);
                setLoadingModal(false);
            })
            .catch((error) => {
                console.error("An error occurred:", error);
                setLoadingModal(false);
            });
    }, []);

    const handleProcessData = useCallback((data: string) => {
        setOutput((prevOutput) => prevOutput + "\n" + data);
    }, []);

    const handleProcessTermination = useCallback(
        ({ code, signal }: { code: number; signal: number }) => {
            if (code === 0) {
                handleProcessData("\nProcess completed successfully.");
            } else if (signal === 15) {
                handleProcessData("\nProcess was manually terminated.");
            } else {
                handleProcessData(`\nProcess terminated with exit code: ${code} and signal code: ${signal}`);
            }

            setPid("");
            setLoading(false);
            setAllowSave(true);
            setHasSaved(false);
        },
        [handleProcessData]
    );

    const onSubmit = async (values: FormValuesType) => {
        setLoading(true);
        setAllowSave(false);

        const args = [
            "/home/kali/Deakin-Detonator-Toolkit/src-tauri/exploits/CVE-2022-26809.py",
            "-u",
            values.target,
            "-p",
            values.port,
            "-c",
            values.payload,
        ];

        console.log("Running script with arguments:",args);
        CommandHelper.runCommandGetPidAndOutput("python3", args, handleProcessData, handleProcessTermination)
            .then(({ output, pid }) => {
                setOutput(output);
                setPid(pid);
            })
            .catch((error) => {
                console.error("Error running CVE-2022-26809.py:", error);
                setOutput(error.message);
                setLoading(false);
                setAllowSave(true);
            });
    };

    const clearOutput = useCallback(() => {
        setOutput("");
        setHasSaved(false);
        setAllowSave(false);
    }, [setOutput]);

    const handleSaveComplete = () => {
        setHasSaved(true);
        setAllowSave(false);
    };

    return (
        <RenderComponent
            title={title}
            description={description}
            steps={steps}
            tutorial={tutorial}
            sourceLink={sourceLink}
        >
            {!loadingModal && (
                <InstallationModal
                    isOpen={opened}
                    setOpened={setOpened}
                    feature_description={description}
                    dependencies={dependencies}
                ></InstallationModal>
            )}
            <form onSubmit={form.onSubmit((values) => onSubmit(values))}>
                <Stack>
                {LoadingOverlayAndCancelButton(loading, pid)}
                    <TextInput label={"Target IP Address"} required {...form.getInputProps("target")} />
                    <TextInput label={"Port"} required {...form.getInputProps("port")} />
                    <TextInput label={"Payload"} required {...form.getInputProps("payload")} />
                    <Button type={"submit"}>Exploit</Button>
                    {SaveOutputToTextFile_v2(output, allowSave, hasSaved, handleSaveComplete)}
                    <ConsoleWrapper output={output} clearOutputCallback={clearOutput} />
                </Stack>
            </form>
        </RenderComponent>
    );
}

export default CVE202226809;