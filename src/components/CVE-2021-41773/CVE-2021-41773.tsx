import { Button, LoadingOverlay, NativeSelect, NumberInput, Stack, TextInput } from "@mantine/core";
import { useForm } from "@mantine/form";
import { useCallback, useState, useEffect } from "react";
import { CommandHelper } from "../../utils/CommandHelper";
import ConsoleWrapper from "../ConsoleWrapper/ConsoleWrapper";
import { RenderComponent } from "../UserGuide/UserGuide";
import { LoadingOverlayAndCancelButton } from "../OverlayAndCancelButton/OverlayAndCancelButton";
import { checkAllCommandsAvailability } from "../../utils/CommandAvailability";
import InstallationModal from "../InstallationModal/InstallationModal";
import { SaveOutputToTextFile_v2 } from "../SaveOutputToFile/SaveOutputToTextFile";

/**
 * Interface representing the form values for the CVE 2021-41773 exploit.
 * Defines the structure of the form data including host IP, target IP, ports, and Apache version.
 */
interface FormValuesType {
    hostIP: string;
    targetIP: string;
    hostPort: number;
    targetPort: number;
    version: string;
}

/**
 * CVE202141773 component responsible for CVE 2021-41773 exploit.
 * Renders a form to input necessary parameters for the exploit and displays user guide.
 */
export function CVE202141773() {
    // Component State Variables.
    const [loading, setLoading] = useState(false); // State variable to indicate loading state.
    const [output, setOutput] = useState(""); // State variable to store the output of the command execution.
    const [selectedVersion, setSelectedVersion] = useState("2.4.49"); // State variablet o display selected version.
    const [allowSave, setAllowSave] = useState(false); // State variable boolean to indicate save state.
    const [hasSaved, setHasSaved] = useState(false); // State variabel boolean to indiciate if the save has been saved.
    const [pid, setPid] = useState(""); // State variable to store the process ID of the command execution.
    const [isCommandAvailable, setIsCommandAvailable] = useState(false); // State variable to check if the command is available.
    const [opened, setOpened] = useState(!isCommandAvailable); // State variable that indicates if the modal is opened.
    const [loadingModal, setLoadingModal] = useState(true); // State variable to indicate loading state of the modal.

    // Component Constants.
    const title = "CVE 2021-41773"; // Title for the CVE 2021-41773 exploit.
    const description = "CVE 2021-41773 targets the Apache HTTP Server (versions 2.4.49 and 2.4.50)"; // Description providing information about the CVE 2021-41773 exploit.
    const steps =
        "Step 1: Enter a Host IP address.\n" +
        "       Eg: 192.168.1.1 (your machine for the reverse shell)\n\n" +
        "Step 2: Enter a Host port.\n" +
        "       Eg: 4444 (for reverse shell)\n\n" +
        "Step 3: Enter a Target IP address or Hostname and Target port.\n" +
        "       Eg: 127.0.0.1, 80\n\n" +
        "Step 4: Choose a version of Apache to exploit.\n" +
        "       Eg: 2.4.49\n\n" +
        "Step 5: Click Exploit to commence the RCEâ€™s operation.\n\n" +
        "Step 6: View the Output block below to view the results of the attack vector's execution.";
    const sourceLink = "cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41773"; // Link to the source code (or Kali Tools).
    const tutorial = ""; // Link to the official documentation/tutorial.
    const dependencies = ["python3"]; // Contains the dependencies required by the component.

    // Form hook to handle form input.
    let form = useForm({
        initialValues: {
            hostIP: "",
            targetIP: "",
            hostPort: 4444,
            targetPort: 80,
            version: "",
        },
    });

    // Check if the command is available and set the state variables accordingly.
    useEffect(() => {
        // Check if the command is available and set the state variables accordingly.
        checkAllCommandsAvailability(dependencies)
            .then((isAvailable) => {
                setIsCommandAvailable(isAvailable); // Set the command availability state
                setOpened(!isAvailable); // Set the modal state to opened if the command is not available
                setLoadingModal(false); // Set loading to false after the check is done
            })
            .catch((error) => {
                console.error("An error occurred:", error);
                setLoadingModal(false); // Also set loading to false in case of error
            });
    }, []);

    /**
     * handleProcessData: Callback to handle and append new data from the child process to the output.
     * It updates the state by appending the new data received to the existing output.
     * @param {string} data - The data received from the child process.
     */
    const handleProcessData = useCallback((data: string) => {
        setOutput((prevOutput) => prevOutput + "\n" + data); // Append new data to the previous output.
    }, []);

    /**
     * handleProcessTermination: Callback to handle the termination of the child process.
     * Once the process termination is handled, it clears the process PID reference and
     * deactivates the loading overlay.
     * @param {object} param - An object containing information about the process termination.
     * @param {number} param.code - The exit code of the terminated process.
     * @param {number} param.signal - The signal code indicating how the process was terminated.
     */
    const handleProcessTermination = useCallback(
        ({ code, signal }: { code: number; signal: number }) => {
            // If the process was successful, display a success message.
            if (code === 0) {
                handleProcessData("\nProcess completed successfully.");

                // If the process was terminated manually, display a termination message.
            } else if (signal === 15) {
                handleProcessData("\nProcess was manually terminated.");

                // If the process was terminated with an error, display the exit and signal codes.
            } else {
                handleProcessData(`\nProcess terminated with exit code: ${code} and signal code: ${signal}`);
            }

            // Clear the child process pid reference. There is no longer a valid process running.
            setPid("");

            // Cancel the loading overlay. The process has completed.
            setLoading(false);
            // Allow Saving as the output is finalised
            setAllowSave(true);
            setHasSaved(false);
        },
        [handleProcessData] // Dependency on the handleProcessData callback
    );

    /**
     * Function to handle form submission.
     * Executes the exploit with the provided form values.
     * @param {FormValuesType} values - Form values containing host IP, target IP, ports, and version.
     */
    const onSubmit = async (values: FormValuesType) => {
        // Activate loading state to indicate ongoing process.
        setLoading(true);

        // Disallow saving until the tool's execution is complete
        setAllowSave(false);

        // Construct arguments for the CVE 2021-41773 command based on form input.
        const args = [
            "/usr/share/ddt/cve-2021-41773.py",
            "-i",
            values.hostIP,
            "-p",
            `${values.hostPort}`,
            "-v",
            values.targetIP,
            "-q",
            `${values.targetPort}`,
            "-w",
            values.version,
        ];

        // Execute the CVE 2021-41773 command via helper method and handle its output or potential errors.
        CommandHelper.runCommandGetPidAndOutput("python3", args, handleProcessData, handleProcessTermination)
            .then(({ output, pid }) => {
                // Update the UI with the results from the executed command
                setOutput(output);
                console.log(pid);
                setPid(pid);
            })
            .catch((error) => {
                // Display any errors encountered during command execution
                setOutput(error.message);
                // Deactivate loading state
                setLoading(false);
                // Activate AllowSave to generate output results.
                setAllowSave(true);
            });
    };

    /**
     * Function to clear output and reset save status.
     */
    const clearOutput = useCallback(() => {
        setOutput("");
        setHasSaved(false);
        setAllowSave(false);
    }, [setOutput]);

    /**
     * Function to handle completion of saving output to a text file.
     * Sets the hasSaved flag to true and disallows further saving.
     */
    const handleSaveComplete = () => {
        // Indicating that the file has saved which is passed
        // back into SaveOutputToTextFile to inform the user
        setHasSaved(true);
        setAllowSave(false);
    };

    return (
        <RenderComponent
            title={title}
            description={description}
            steps={steps}
            tutorial={tutorial}
            sourceLink={sourceLink}
        >
            {!loadingModal && (
                <InstallationModal
                    isOpen={opened}
                    setOpened={setOpened}
                    feature_description={description}
                    dependencies={dependencies}
                ></InstallationModal>
            )}
            <form onSubmit={form.onSubmit((values) => onSubmit({ ...values, version: selectedVersion }))}>
                <LoadingOverlay visible={loading} />
                <Stack>
                    {LoadingOverlayAndCancelButton(loading, pid)}
                    <TextInput
                        label={"Host IP (your machine, for the reverse shell)"}
                        required
                        {...form.getInputProps("hostIP")}
                    />
                    <NumberInput label={"Host port (for reverse shell)"} {...form.getInputProps("hostPort")} />
                    <TextInput label={"Target IP or Hostname"} required {...form.getInputProps("targetIP")} />
                    <NumberInput label={"Target port"} required {...form.getInputProps("targetPort")} />
                    <NativeSelect
                        value={selectedVersion}
                        onChange={(e) => setSelectedVersion(e.target.value)}
                        title={"Scan option"}
                        data={["2.4.49", "2.4.50"]}
                        required
                        label={"Pick an apache version"}
                    />
                    <Button type={"submit"}>Exploit</Button>
                    {SaveOutputToTextFile_v2(output, allowSave, hasSaved, handleSaveComplete)}
                    <ConsoleWrapper output={output} clearOutputCallback={clearOutput} />
                </Stack>
            </form>
        </RenderComponent>
    );
}

export default CVE202141773;
