import { Button, Stack, TextInput } from "@mantine/core";
import { useForm } from "@mantine/form";
import { useCallback, useState, useEffect } from "react";
import { CommandHelper } from "../../utils/CommandHelper";
import ConsoleWrapper from "../ConsoleWrapper/ConsoleWrapper";
import { RenderComponent } from "../UserGuide/UserGuide";
import { LoadingOverlayAndCancelButton } from "../OverlayAndCancelButton/OverlayAndCancelButton";
import { checkAllCommandsAvailability } from "../../utils/CommandAvailability";
import InstallationModal from "../InstallationModal/InstallationModal";
import { SaveOutputToTextFile_v2 } from "../SaveOutputToFile/SaveOutputToTextFile";

/**
 * Interface representing the form values for the CVE-2023-22527 exploit.
 * Defines the structure of the form data including URL and command
 */
interface FormValuesType {
    url: string;
    username: string;
    password: string;
}

/**
 * CVE202322515 component responsible for CVE-2023-22527 exploit.
 * Renders a form to input necessary parameters for the exploit and displays user guide.
 */
export function CVE202322515() {
    // Component State Variables
    const [loading, setLoading] = useState(false); // State variable to indicate loading state
    const [output, setOutput] = useState(""); // State variable to store the output of the command execution
    const [allowSave, setAllowSave] = useState(false); // State variable boolean to indicate save state
    const [hasSaved, setHasSaved] = useState(false); // State variable boolean to indicate if the save has been saved
    const [pid, setPid] = useState(""); // State variable to store the process ID of the command execution
    const [isCommandAvailable, setIsCommandAvailable] = useState(false); // State variable to check if the command is available
    const [opened, setOpened] = useState(!isCommandAvailable); // State variable that indicates if the modal is opened
    const [loadingModal, setLoadingModal] = useState(true); // State variable to indicate loading state of the modal

    // Component Constants
    const title = "CVE-2023-22515";
    const description =
        "This CVE exploits an authentication bypass in Atlassian Confluence's /server-info.action endpoint.";
    const steps =
        "Step 1: Enter the vulnerable Confluence server URL.\n" +
        "Step 2: Enter the username you want.\n" +
        "Step 3: Enter the password you want.\n" +
        "Step 4: Click 'Exploit' to test if the server info endpoint is exposed.\n" +
        "Step 5: Review the response for sensitive system details.";
    const sourceLink = "https://nvd.nist.gov/vuln/detail/CVE-2023-22515";
    const tutorial = "";
    const dependencies = ["python3"];

    // Form hook to handle form input
    const form = useForm({
        initialValues: {
            url: "",
            username: "fakeadmin",
            password: "Password123!",
        },
    });

    // Check if the command is available and set the state variables accordingly
    useEffect(() => {
        checkAllCommandsAvailability(dependencies)
            .then((isAvailable) => {
                setIsCommandAvailable(isAvailable);
                setOpened(!isAvailable);
                setLoadingModal(false);
            })
            .catch(() => setLoadingModal(false));
    }, []);

    /**
     * handleProcessData: Callback to handle and append new data from the child process to the output.
     * It updates the state by appending the new data received to the existing output.
     * @param {string} data - The data received from the child process.
     */
    const handleProcessData = useCallback((data: string) => {
        setOutput((prev) => prev + "\n" + data);
    }, []);

    /**
     * handleProcessTermination: Callback to handle the termination of the child process.
     * Once the process termination is handled, it clears the process PID reference and
     * deactivates the loading overlay.
     * @param {object} param - An object containing information about the process termination.
     * @param {number} param.code - The exit code of the terminated process.
     * @param {number} param.signal - The signal code indicating how the process was terminated.
     */
    const handleProcessTermination = useCallback(
        ({ code, signal }: { code: number; signal: number }) => {
            if (code === 0) handleProcessData("\nProcess completed successfully.");
            else if (signal === 15) handleProcessData("\nProcess was manually terminated.");
            else handleProcessData(`\nProcess exited with code: ${code}, signal: ${signal}`);
            setPid("");
            setLoading(false);
            setAllowSave(true);
            setHasSaved(false);
        },
        [handleProcessData]
    );

    /**
     * Function to handle form submission.
     * Executes the exploit with the provided form values.
     * @param {FormValuesType} values - Form values containing URL, project key, repository name, command, and session ID.
     */
    const onSubmit = async (values: FormValuesType) => {
        setLoading(true);
        setAllowSave(false);

        const args = [
            "./exploits/CVE-2023-22515.py",
            "-u",
            values.url,
            "--username",
            values.username,
            "--password",
            values.password,
        ];

        CommandHelper.runCommandGetPidAndOutput("python3", args, handleProcessData, handleProcessTermination)
            .then(({ output, pid }) => {
                setOutput(output);
                setPid(pid);
            })
            .catch((error) => {
                setOutput(error.message);
                setLoading(false);
                setAllowSave(true);
            });
    };

    /**
     * Function to clear output and reset save status.
     */
    const clearOutput = useCallback(() => {
        setOutput("");
        setHasSaved(false);
        setAllowSave(false);
    }, []);

    /**
     * Function to handle completion of saving output to a text file.
     * Sets the hasSaved flag to true and disallows further saving.
     */
    const handleSaveComplete = () => {
        setHasSaved(true);
        setAllowSave(false);
    };

    return (
        <RenderComponent
            title={title}
            description={description}
            steps={steps}
            tutorial={tutorial}
            sourceLink={sourceLink}
        >
            {!loadingModal && (
                <InstallationModal
                    isOpen={opened}
                    setOpened={setOpened}
                    feature_description={description}
                    dependencies={dependencies}
                />
            )}
            <form onSubmit={form.onSubmit((values) => onSubmit(values))}>
                <Stack>
                    {LoadingOverlayAndCancelButton(loading, pid)}
                    <TextInput label={"Target URL"} required {...form.getInputProps("url")} />
                    <TextInput label={"Username"} required {...form.getInputProps("username")} />
                    <TextInput label={"Password"} required type="password" {...form.getInputProps("password")} />
                    <Button type="submit">Exploit</Button>
                    {SaveOutputToTextFile_v2(output, allowSave, hasSaved, handleSaveComplete)}
                    <ConsoleWrapper output={output} clearOutputCallback={clearOutput} />
                </Stack>
            </form>
        </RenderComponent>
    );
}

export default CVE202322515;
