import { Button, LoadingOverlay, Stack, TextInput } from "@mantine/core";
import { useForm } from "@mantine/form";
import { useCallback, useState, useEffect } from "react";
import { CommandHelper } from "../../utils/CommandHelper";
import ConsoleWrapper from "../ConsoleWrapper/ConsoleWrapper";
import { SaveOutputToTextFile_v2 } from "../SaveOutputToFile/SaveOutputToTextFile";
import { checkAllCommandsAvailability } from "../../utils/CommandAvailability";
import { RenderComponent } from "../UserGuide/UserGuide";
import { LoadingOverlayAndCancelButton } from "../OverlayAndCancelButton/OverlayAndCancelButton";
import InstallationModal from "../InstallationModal/InstallationModal";
import { isNotEmpty, matches } from "@mantine/form";

const title = "GoBuster Directory and File Brute-Forcing Tool";
const description_userguide = "GoBuster is a tool used for directory and file brute-forcing on web servers.";

/**
 * Represents the form values for the AirbaseNG component.
 */
interface FormValuesType {
    url: string;
    wordlist: string;
}

/**
 * The GoBuster component.
 * @returns The GoBuster component.
 */
const GoBusterTool = () => {
    //Component State Variables.
    const [loading, setLoading] = useState(false); // State variable to indicate loading state.
    const [output, setOutput] = useState(""); // State variable to store the output of the command execution.
    const [pid, setPid] = useState(""); // State variable to store the process ID of the command execution.
    const [allowSave, setAllowSave] = useState(false); // State variable to allow saving of output
    const [hasSaved, setHasSaved] = useState(false); // State variable to indicate if output has been saved
    const [isCommandAvailable, setIsCommandAvailable] = useState(false); // State variable to check if the command is available.
    const [opened, setOpened] = useState(!isCommandAvailable); // State variable that indicates if the modal is opened.
    const [loadingModal, setLoadingModal] = useState(true); // State variable to indicate loading state of the modal.

    // Component Constants.
    const title = "GoBuster"; // Title of the component.
    const description =
        "GoBuster is a security tool that helps identify hidden files and directories on a website by attempting to access them using a list of common names." +
        "This can reveal potential vulnerabilities, such as exposed administrative panels or sensitive data, that might be exploited by attackers."; // Description of the component.
    const steps =
        "Step 1: Enter the target website URL (e.g., https://example.com).\n" +
        "Step 2: Specify the path to a wordlist file (e.g., /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt).\n" +
        "Step 3: Click Start GoBuster to initiate the scan."; // Steps to undertake to use the tool. // Steps to undertake to use the tool.
    const sourceLink = "https://www.kali.org/tools/gobuster/"; // Link to the source code (or Kali Tools).
    const tutorial = "https://docs.google.com/document/d/1fMANB1rlFPlWFKaRqKhWhuaw3wQ8bsY4CKJp6XQpGBw/edit?usp=sharing"; // Link to the official documentation/tutorial.
    const dependencies = ["gobuster"]; // Contains the dependencies required by the component.

    // Form hook to handle form input with validation.
    const form = useForm({
        initialValues: {
            url: "",
            wordlist: "",
        },
        validate: {
            url: (value) =>
                /^https?:\/\/[^\s$.?#].[^\s]*$/.test(value) ? null : "Invalid URL format. Example: https://example.com",
            wordlist: (value) => (isNotEmpty(value) ? null : "Wordlist file path cannot be empty."),
        },
    });

    // Check if the command is available and set the state variables accordingly.
    useEffect(() => {
        // Check if the command is available and set the state variables accordingly.
        checkAllCommandsAvailability(dependencies)
            .then((isAvailable) => {
                setIsCommandAvailable(isAvailable); // Set the command availability state
                setOpened(!isAvailable); // Set the modal state to opened if the command is not available
                setLoadingModal(false); // Set loading to false after the check is done
            })
            .catch((error) => {
                console.error("An error occurred:", error);
                setLoadingModal(false); // Also set loading to false in case of error
            });
    }, []);

    /** 
    // Uses the callback function of runCommandGetPidAndOutput to handle and save data
    // generated by the executing process into the output state variable.
    */
    const handleProcessData = useCallback((data: string) => {
        setOutput((prevOutput) => prevOutput + "\n" + data); // Update output
    }, []);

    /**
    // Uses the onTermination callback function of runCommandGetPidAndOutput to handle
    // the termination of that process, resetting state variables, handling the output data,
    // and informing the user.
     */
    const handleProcessTermination = useCallback(
        ({ code, signal }: { code: number; signal: number }) => {
            if (code === 0) {
                handleProcessData("\nProcess completed successfully.");
            } else if (signal === 15) {
                handleProcessData("\nProcess was manually terminated.");
            } else {
                handleProcessData(`\nProcess terminated with exit code: ${code} and signal code: ${signal}`);
            }
            // Clear the child process pid reference
            setPid("");
            // Cancel the Loading Overlay
            setLoading(false);

            // Allow Saving as the output is finalised
            setAllowSave(true);
            setHasSaved(false);
        },
        [handleProcessData]
    );

    /**
     * Handles form submission for the GoBuster component.
     * @param {FormValuesType} values
     */
    const onSubmit = async (values: FormValuesType) => {
        if (!form.validate().hasErrors) {
            // Disallow saving until the tool's execution is complete
            setAllowSave(false);
            setLoading(true);
            const args = ["dir", "-u", values.url, "-w", values.wordlist];

            try {
                const result = await CommandHelper.runCommandGetPidAndOutput(
                    "gobuster",
                    args,
                    handleProcessData,
                    handleProcessTermination
                );
                setPid(result.pid);
                setOutput(result.output);
            } catch (e: any) {
                setOutput(e.message);
            }

            setLoading(false);
        }
    };

    /**
    Actions taken after saving the outtpu
     */
    const handleSaveComplete = () => {
        // Indicating that the file has saved which is passed
        // back into SaveOutputToTextFile to inform the user
        setHasSaved(true);
        setAllowSave(false);
    };

    /**
     * Clears the output state.
     */
    const clearOutput = useCallback(() => {
        setOutput("");

        // reset save state variables to defaults
        setHasSaved(false);
        setAllowSave(false);
    }, [setOutput]);

    return (
        <RenderComponent
            title={title}
            description={description}
            steps={steps}
            tutorial={tutorial}
            sourceLink={sourceLink}
        >
            {!loadingModal && (
                <InstallationModal
                    isOpen={opened}
                    setOpened={setOpened}
                    feature_description={description}
                    dependencies={dependencies}
                ></InstallationModal>
            )}
            <form onSubmit={form.onSubmit(onSubmit)}>
                <Stack>
                    {LoadingOverlayAndCancelButton(loading, pid)}
                    <TextInput label={"Target URL"} required {...form.getInputProps("url")} error={form.errors.url} />
                    <TextInput
                        label={"Wordlist File"}
                        required
                        {...form.getInputProps("wordlist")}
                        error={form.errors.wordlist}
                    />
                    <Button type={"submit"}>Start {title}</Button>
                    {SaveOutputToTextFile_v2(output, allowSave, hasSaved, handleSaveComplete)}
                    <ConsoleWrapper output={output} clearOutputCallback={clearOutput} />
                </Stack>
            </form>
        </RenderComponent>
    );
};

export default GoBusterTool;
