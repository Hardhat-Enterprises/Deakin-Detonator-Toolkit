import { Button, LoadingOverlay, NativeSelect, Stack, TextInput } from "@mantine/core";
import { useForm } from "@mantine/form";
import { useCallback, useState, useEffect } from "react";
import { CommandHelper } from "../../utils/CommandHelper";
import ConsoleWrapper from "../ConsoleWrapper/ConsoleWrapper";
import { writeTextFile, BaseDirectory } from "@tauri-apps/api/fs";
import { SaveOutputToTextFile } from "../SaveOutputToFile/SaveOutputToTextFile";
import { RenderComponent } from "../UserGuide/UserGuide";
import InstallationModal from "../InstallationModal/InstallationModal";
import { checkAllCommandsAvailability } from "../../utils/CommandAvailability";

/**
 * Represents the form values for the AirbaseNG component.
 */
interface FormValuesType {
    filePath: string;
    hash: string;
    fileType: string;
    mode: string;
    wordList: string;
    incrementOrder: string;
}

const modeRequiringWordList = ["dictionary"];
const modeRequiringIncrementOrder = ["incremental"];
const fileTypes = ["zip", "rar", "raw"];
const mode = ["incremental", "dictionary", "single"];
const incrementOrder = [
    "ASCII",
    "LM_ASCII",
    "AlNum",
    "Alpha",
    "LowerNum",
    "UpperNum",
    "LowerSpace",
    "Lower",
    "Upper",
    "Digits",
    "LM_ASCII",
];

const JohnTheRipper = () => {
    const [loading, setLoading] = useState(false);
    const [output, setOutput] = useState("");
    const [selectedFileTypeOption, setSelectedFileTypeOption] = useState("");
    const [selectedModeOption, setSelectedModeOption] = useState("");
    const [selectedIncrementOption, setSelectedIncrementOption] = useState("");
    const [pid, setPid] = useState("");
    const [loadingModal, setLoadingModal] = useState(true);
    const [isCommandAvailable, setIsCommandAvailable] = useState(false); // State variable to check if the command is available.
    const [opened, setOpened] = useState(!isCommandAvailable); // State variable that indicates if the modal is opened.

    const title = "John the Ripper";
    const description =
        "John the Ripper is a fast password cracker, its primary purpose is to detect weak Unix passwords.";
    const steps =
        "Step 1: Specify the filepath to the password file that you wish to crack E.g /home/user/passwords.txt\n" +
        "Step 2: Specify the hash that is utilized in the password file. A wide range of hashes are supported by the tool. (For full list, open new terminal and use john --list=formats command) E.g md5\n" +
        "Step 3: Specify which crack mode to use. E.g Dictionary, Incremental and Single mode\n" +
        "Step 4: This specifies the format of the password file. This is necessary so as to enable John the Ripper to correctly read the file. E.g rar\n" +
        "Step 5: Depending on what is chosen on step3, a follow up option may appear. This option specializes the mode of cracking\n" +
        "Step 6: Click crack to commence the tool's execution.\n" +
        "Step 7: View the output block below to view the results of the tool's execution.\n";
    const sourceLink = "https://github.com/openwall/john";
    const tutorial = "";
    const dependencies = ["john"];

    let form = useForm({
        initialValues: {
            filePath: "",
            hash: "",
            fileType: "",
            wordList: "",
            mode: "",
            incrementOrder: "",
        },
    });

    // Check if the command is available and set the state variables accordingly.
    useEffect(() => {
        // Check if the command is available and set the state variables accordingly.
        checkAllCommandsAvailability(dependencies)
            .then((isAvailable) => {
                setIsCommandAvailable(isAvailable); // Set the command availability state
                setOpened(!isAvailable); // Set the modal state to opened if the command is not available
                setLoadingModal(false); // Set loading to false after the check is done
            })
            .catch((error) => {
                console.error("An error occurred:", error);
                setLoadingModal(false); // Also set loading to false in case of error
            });
    }, []);

    // Uses the callback function of runCommandGetPidAndOutput to handle and save data
    // generated by the executing process into the output state variable.
    const handleProcessData = useCallback((data: string) => {
        setOutput((prevOutput) => prevOutput + "\n" + data); // Update output
    }, []);

    // Uses the onTermination callback function of runCommandGetPidAndOutput to handle
    // the termination of that process, resetting state variables, handling the output data,
    // and informing the user.
    const handleProcessTermination = useCallback(
        ({ code, signal }: { code: number; signal: number }) => {
            if (code === 0) {
                handleProcessData("\nProcess completed successfully.");
            } else if (signal === 15) {
                handleProcessData("\nProcess was manually terminated.");
            } else {
                handleProcessData(`\nProcess terminated with exit code: ${code} and signal code: ${signal}`);
            }
            // Clear the child process pid reference
            setPid("");
            // Cancel the Loading Overlay
            setLoading(false);
        },
        [handleProcessData]
    );

    // Sends a SIGTERM signal to gracefully terminate the process
    const handleCancel = () => {
        if (pid !== null) {
            const args = [`-15`, pid];
            CommandHelper.runCommand("kill", args);
        }
    };

    const onSubmit = async (values: FormValuesType) => {
        setLoading(true);

        //if hash is stored in a textfile
        if (values.fileType === "raw") {
            const args = [values.filePath];
            values.hash ? args.push(`--format=${values.hash}`) : undefined;

            selectedModeOption === "dictionary"
                ? args.push(`--wordlist=${values.wordList}`)
                : selectedModeOption === "incremental"
                ? args.push(`-incremental:${values.incrementOrder}`)
                : args.push(`--single`);
            try {
                const result = await CommandHelper.runCommand(`john`, args);
                setOutput(output + "\n" + result);
            } catch (e: any) {
                setOutput(e);
            }

            setLoading(false);
        } else {
            const argsExtract = [values.filePath];
            const argsCrack = [`/tmp/hash.txt`];

            //extract password hash from zip/rar files
            try {
                const result = await CommandHelper.runCommand(`${values.fileType}2john`, argsExtract);
                await writeTextFile("hash.txt", result, { dir: BaseDirectory.Temp });
                setOutput(result);
            } catch (e: any) {
                setOutput(e);
            }

            //Crack the extracted hash
            values.hash ? argsCrack.push(`--format=${values.hash}`) : undefined;
            selectedModeOption === "dictionary"
                ? argsCrack.push(`--wordlist=${values.wordList}`)
                : selectedModeOption === "incremental"
                ? argsCrack.push(`-incremental:${values.incrementOrder}`)
                : argsCrack.push(`--single`);

            try {
                const result = await CommandHelper.runCommand(`john`, argsCrack);
                setOutput(output + "\n" + result);
            } catch (e: any) {
                setOutput(e);
            }

            setLoading(false);
        }
    };

    const clearOutput = useCallback(() => {
        setOutput("");
    }, [setOutput]);

    return (
        <RenderComponent
            title={title}
            description={description}
            steps={steps}
            tutorial={tutorial}
            sourceLink={sourceLink}
        >
            {!loadingModal && (
                <InstallationModal
                    isOpen={opened}
                    setOpened={setOpened}
                    feature_description={description}
                    dependencies={dependencies}
                ></InstallationModal>
            )}
            <form onSubmit={form.onSubmit((values) => onSubmit({ ...values, fileType: selectedFileTypeOption }))}>
                <LoadingOverlay visible={loading} />
                <Stack>
                    <TextInput label={"Filepath"} required {...form.getInputProps("filePath")} />
                    <TextInput label={"Hash Type (if known)"} {...form.getInputProps("hash")} />
                    <NativeSelect
                        value={selectedModeOption}
                        onChange={(e) => setSelectedModeOption(e.target.value)}
                        title={"Crack Mode"}
                        data={mode}
                        required
                        placeholder={"Crack Mode"}
                        description={"Please select a crack mode"}
                    />
                    <NativeSelect
                        value={selectedFileTypeOption}
                        onChange={(e) => setSelectedFileTypeOption(e.target.value)}
                        title={"File Type"}
                        data={fileTypes}
                        required
                        placeholder={"File Type"}
                        description={"Please select the type of file you want to crack"}
                    />
                    {modeRequiringWordList.includes(selectedModeOption) && (
                        <>
                            <TextInput label={"Dictionary File Path"} required {...form.getInputProps("wordlist")} />
                        </>
                    )}
                    {modeRequiringIncrementOrder.includes(selectedModeOption) && (
                        <>
                            <NativeSelect
                                value={selectedIncrementOption}
                                onChange={(e) => setSelectedIncrementOption(e.target.value)}
                                title={"Increment Order"}
                                data={incrementOrder}
                                required
                                placeholder={"Increment Order"}
                                description={"Please select a Increment Order"}
                            />
                        </>
                    )}

                    <Button type={"submit"}>Crack</Button>
                    {SaveOutputToTextFile(output)}
                    <ConsoleWrapper output={output} clearOutputCallback={clearOutput} />
                </Stack>
            </form>
        </RenderComponent>
    );
};

export default JohnTheRipper;
