import { Button, Stack, TextInput } from "@mantine/core";
import { useForm } from "@mantine/form";
import { useCallback, useState, useEffect } from "react";
import { CommandHelper } from "../../utils/CommandHelper";
import ConsoleWrapper from "../ConsoleWrapper/ConsoleWrapper";
import { LoadingOverlayAndCancelButton } from "../OverlayAndCancelButton/OverlayAndCancelButton";
import { SaveOutputToTextFile_v2 } from "../SaveOutputToFile/SaveOutputToTextFile";
import { checkAllCommandsAvailability } from "../../utils/CommandAvailability";
import InstallationModal from "../InstallationModal/InstallationModal";
import { RenderComponent } from "../UserGuide/UserGuide";

/**
 * Represents the form values for the Rtgen component.
 */
interface FormValuesType {
  hashAlgorithm: string;
  charset: string;
  plaintextLength: string;
  tableFile: string;
}

/**
 * The Rtgen component.
 * @returns The Rtgen component.
 */
const Rtgen = () => {
  // State variables
  const [loading, setLoading] = useState(false); // Represents the loading state of the component.
  const [output, setOutput] = useState(""); // Stores the output of the command execution.
  const [pid, setPid] = useState(""); // Stores the process ID of the command execution.
  const [allowSave, setAllowSave] = useState(false); // Allows saving the output to a file.
  const [hasSaved, setHasSaved] = useState(false); // Indicates if the output has been saved.
  const [isCommandAvailable, setIsCommandAvailable] = useState(false); // Checks if the command is available.
  const [opened, setOpened] = useState(!isCommandAvailable); // Checks if the installation modal is open.
  const [loadingModal, setLoadingModal] = useState(true); // Indicates loading state for the installation modal.

  // Component Constants
  const title = "Rtgen"; // Component title
  const description =
    // Component description
    "Rtgen generates rainbow tables for password cracking. Use this tool to generate tables for various hash algorithms and character sets.";
  const steps =
    "Step 1: Select hash algorithm.\n" +
    "Step 2: Choose charset.\n" +
    "Step 3: Define plaintext length.\n" +
    "Step 4: Specify the table file.\n" +
    "Step 5: Click Generate to create rainbow tables.";
  const sourceLink = ""; // Link to the source code, if applicable
  const tutorial = ""; // Link to the official documentation/tutorial
  const dependencies = ["rtgen"]; // Contains the dependencies required by the component.

  // Form hook to handle input
  const form = useForm({
    initialValues: {
      hashAlgorithm: "md5",
      charset: "numeric",
      plaintextLength: "1-7",
      tableFile: "table.rt",
    },
  });

  // Check the availability of all commands in the dependencies array.
  useEffect(() => {
    checkAllCommandsAvailability(dependencies)
      .then((isAvailable) => {
        setIsCommandAvailable(isAvailable); // Set the command availability state.
        setOpened(!isAvailable); // Set the modal state to opened if the command is not available.
        setLoadingModal(false); // Set loading to false after the check is done.
      })
      .catch((error) => {
        console.error("An error occurred:", error);
        setLoadingModal(false); // Also set loading to false in case of error.
      });
  }, []);

  /**
   * Uses the callback function of runCommandGetPidAndOutput to handle and save data
   * generated by the executing process into the output state variable.
   */
  const handleProcessData = useCallback((data: string) => {
    setOutput((prevOutput) => prevOutput + "\n" + data); // Update output
    setAllowSave(true);
  }, []);

  /**
   * Uses the onTermination callback function of runCommandGetPidAndOutput to handle
   * the termination of that process, resetting state variables, handling the output data,
   * and informing the user.
   */
  const handleProcessTermination = useCallback(
    ({ code, signal }: { code: number; signal: number }) => {
      if (code === 0) {
        handleProcessData("\nProcess completed successfully."); // If the process was successful, display a success message.
      } else if (signal === 15) {
        handleProcessData("\nProcess was manually terminated."); // If the process was terminated manually, display a termination message.
      } else {
        handleProcessData(`\nProcess terminated with exit code: ${code} and signal: ${signal}`); // If the process was terminated with an error, display the exit and signal codes.
      }
      setPid(""); // Clear the child process pid reference.
      setLoading(false); // Cancel the Loading Overlay.
    },
    [handleProcessData]
  );

  /**
   * handleSaveComplete: Recognizes that the output file has been saved.
   * Passes the saved status back to SaveOutputToTextFile_v2.
   */
  const handleSaveComplete = () => {
    setHasSaved(true);
    setAllowSave(false);
  };

  /**
   * onSubmit: Asynchronous handler for the form submission event.
   * It sets up and triggers the Rtgen tool with the given parameters.
   * Once the command is executed, the results or errors are displayed in the output.
   * @param {FormValuesType} values - The form values.
   */
  const onSubmit = async (values: FormValuesType) => {
    setAllowSave(false); // Disallow saving until the tool's execution is complete.
    setLoading(true); // Set the loading state to true to indicate that the process is starting.

    const args = [
      values.hashAlgorithm,
      values.charset,
      values.plaintextLength,
      values.tableFile,
    ];

    CommandHelper.runCommandGetPidAndOutput("rtgen", args, handleProcessData, handleProcessTermination)
      .then(({ pid, output }) => {
        setPid(pid); // Update the state with the process ID.
        setOutput(output); // Set the initial output.
      })
      .catch((error) => {
        setLoading(false);
        setOutput(`Error: ${error.message}`); // If an error occurs, display the error message.
      });
  };

  /**
   * clearOutput: Callback function to clear the console output.
   * It resets the state variable holding the output, thereby clearing the display.
   */
  const clearOutput = useCallback(() => {
    setOutput("");
    setHasSaved(false);
    setAllowSave(false);
  }, [setOutput]);

  return (
    <RenderComponent
      title={title}
      description={description}
      steps={steps}
      tutorial={tutorial}
      sourceLink={sourceLink}
    >
      {!loadingModal && (
        <InstallationModal
          isOpen={opened}
          setOpened={setOpened}
          feature_description={description}
          dependencies={dependencies}
        />
      )}
      <form onSubmit={form.onSubmit(onSubmit)}>
        {LoadingOverlayAndCancelButton(loading, pid)}
        <Stack>
          <TextInput label="Hash Algorithm" required {...form.getInputProps("hashAlgorithm")} />
          <TextInput label="Charset" required {...form.getInputProps("charset")} />
          <TextInput label="Plaintext Length (e.g. 1-7)" required {...form.getInputProps("plaintextLength")} />
          <TextInput label="Table File" required {...form.getInputProps("tableFile")} />
          <Button type="submit">Generate</Button>
          {SaveOutputToTextFile_v2(output, allowSave, hasSaved, handleSaveComplete)}
          <ConsoleWrapper output={output} clearOutputCallback={clearOutput} />
        </Stack>
      </form>
    </RenderComponent>
  );
};

export default Rtgen;
