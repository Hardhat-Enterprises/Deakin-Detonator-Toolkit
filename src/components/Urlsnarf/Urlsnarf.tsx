import { Button, LoadingOverlay, NativeSelect, Stack, TextInput } from "@mantine/core";
import { useForm } from "@mantine/form";
import { useCallback, useState } from "react";
import { CommandHelper } from "../../utils/CommandHelper";
import ConsoleWrapper from "../ConsoleWrapper/ConsoleWrapper";
import { SaveOutputToTextFile_v2 } from "../SaveOutputToFile/SaveOutputToTextFile";
import { LoadingOverlayAndCancelButton } from "../OverlayAndCancelButton/OverlayAndCancelButton";
import { RenderComponent } from "../UserGuide/UserGuide";

interface FormValuesType {
    listenerInputType: string;
    listenerArgs: string;
    versusMode: string;
}

const Urlsnarf = () => {
    const [loading, setLoading] = useState(false);
    const [output, setOutput] = useState("");
    const [selectedListenerInput, setSelectedListenerInput] = useState("");
    const [pid, setPid] = useState("");
    const [allowSave, setAllowSave] = useState(false);
    const [hasSaved, setHasSaved] = useState(false);

    const listeners = ["Interface", "Packet capture file"];
    const title = "Urlsnarf";
    const description =
        "Urlsnarf outputs all requested URLs sniffed from HTTP traffic in Common Log Format, used by almost all web servers.";
    const steps =
        "Step 1: Select the Listener settings.\n" +
        "Step 2: Input the Interface.\n" +
        "Step 3: Enter any Exclusion details within the sniff.\n" +
        "Step 4: Click Sniff to start Urlsnarf.\n" +
        "Step 5: View the Output block to see the results.";
    const sourceLink = "https://linux.die.net/man/8/urlsnarf";
    const tutorial = "";
    const dependencies = ["dsniff"];

    let form = useForm({
        initialValues: {
            listenerInputType: "",
            listenerArgs: "",
            versusMode: "",
        },
    });

    // Uses the callback function of runCommandGetPidAndOutput to handle and save data
    // generated by the executing process into the output state variable.
    const handleProcessData = useCallback((data: string) => {
        setOutput((prevOutput) => prevOutput + "\n" + data); // Update output
    }, []);

    // Uses the onTermination callback function of runCommandGetPidAndOutput to handle
    // the termination of that process, resetting state variables, handling the output data,
    // and informing the user.
    const handleProcessTermination = useCallback(
        ({ code, signal }: { code: number; signal: number }) => {
            if (code === 0) {
                handleProcessData("\nProcess completed successfully.");
            } else if (signal === 15) {
                handleProcessData("\nProcess was manually terminated.");
            } else {
                handleProcessData(`\nProcess terminated with exit code: ${code} and signal code: ${signal}`);
            }
            // Clear the child process pid reference
            setPid("");
            // Cancel the Loading Overlay
            setLoading(false);
            // Allow Saving as the output is finalised
            setAllowSave(true);
            setHasSaved(false);
        },
        [handleProcessData]
    );

    // Actions taken after saving the output
    const handleSaveComplete = () => {
        // Indicating that the file has saved which is passed
        // back into SaveOutputToTextFile to inform the user
        setHasSaved(true);
        setAllowSave(false);
    };

    const onSubmit = async (values: FormValuesType) => {
        // Disallow saving until the tool's execution is complete
        setAllowSave(false);

        // Start the Loading Overlay
        setLoading(true);

        const args = [];
        if (selectedListenerInput === "Interface") {
            args.push(`-i`, `${values.listenerArgs}`);
        } else if (selectedListenerInput === "Packet capture file") {
            args.push(`-p`, `${values.listenerArgs}`);
        }
        args.push(`-v`, `${values.versusMode}`);

        try {
            const result = await CommandHelper.runCommandGetPidAndOutput(
                "urlsnarf",
                args,
                handleProcessData,
                handleProcessTermination
            );
            setPid(result.pid);
            setOutput(result.output);
        } catch (e: any) {
            setOutput(e.message);
        }
    };

    const clearOutput = useCallback(() => {
        setOutput("");
        setHasSaved(false);
        setAllowSave(false);
    }, [setOutput]);

    const isListenerInterface = selectedListenerInput === "Interface";
    const isListenerFile = selectedListenerInput === "Packet capture file";

    return (
        <RenderComponent
            title={title}
            description={description}
            steps={steps}
            tutorial={tutorial}
            sourceLink={sourceLink}
        >
            <form
                onSubmit={form.onSubmit((values) =>
                    onSubmit({
                        ...values,
                        listenerInputType: selectedListenerInput,
                    })
                )}
            >
                {LoadingOverlayAndCancelButton(loading, pid)}
                <Stack>
                    <NativeSelect
                        value={selectedListenerInput}
                        onChange={(e) => setSelectedListenerInput(e.target.value)}
                        label={"listener settings"}
                        data={listeners}
                        required
                        placeholder={"Interface or PCAP file"}
                    />
                    {isListenerInterface && (
                        <TextInput
                            {...form.getInputProps("listenerArgs")}
                            label={"Interface"}
                            placeholder={"eg: eth0"}
                            required
                        />
                    )}
                    {isListenerFile && (
                        <TextInput
                            {...form.getInputProps("listenerArgs")}
                            label={"File path"}
                            placeholder={"eg: /home/kali/Desktop/pcap.pcapng"}
                            required
                        />
                    )}
                    <TextInput
                        {...form.getInputProps("versusMode")}
                        label={"Exclusion details"}
                        placeholder={"eg: POST ; show every packet that excludes POST"}
                    />
                    <Button type={"submit"} color="cyan">
                        Sniff
                    </Button>
                    {SaveOutputToTextFile_v2(output, allowSave, hasSaved, handleSaveComplete)}
                    <ConsoleWrapper output={output} clearOutputCallback={clearOutput} />
                </Stack>
            </form>
        </RenderComponent>
    );
};

export default Urlsnarf;
