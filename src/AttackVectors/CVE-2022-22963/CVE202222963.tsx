import { Button, LoadingOverlay, Stack, TextInput, NumberInput } from "@mantine/core";
import { useForm } from "@mantine/form";
import { useCallback, useEffect, useState } from "react";
import { CommandHelper } from "../../utils/CommandHelper";
import ConsoleWrapper from "../ConsoleWrapper/ConsoleWrapper";
import { RenderComponent } from "../UserGuide/UserGuide";
import { checkAllCommandsAvailability } from "../../utils/CommandAvailability";
import InstallationModal from "../InstallationModal/InstallationModal";
import { SaveOutputToTextFile_v2 } from "../SaveOutputToFile/SaveOutputToTextFile";
import { LoadingOverlayAndCancelButton } from "../OverlayAndCancelButton/OverlayAndCancelButton";

interface FormValuesType {
    targetIP: string;
    targetPort: number;
    command: string;
}

export function CVE202222963() {
    const [loading, setLoading] = useState(false);
    const [output, setOutput] = useState("");
    const [allowSave, setAllowSave] = useState(false);
    const [hasSaved, setHasSaved] = useState(false);
    const [pid, setPid] = useState("");
    const [isCommandAvailable, setIsCommandAvailable] = useState(false);
    const [opened, setOpened] = useState(!isCommandAvailable);
    const [loadingModal, setLoadingModal] = useState(true);

    const title = "CVE-2022-22963";
    const description =
        "Spring Cloud Function versions <=3.1.6 and <=3.2.2 are vulnerable to SpEL injection leading to RCE.";

    // Steps and note for user guidance in UI
    const steps = `Step 1: Enter the Target IP (running vulnerable Spring Cloud).
  Step 2: Enter the Target Port (usually 8080 or 80).
  Step 3: Enter a command to execute on the target system.
  Step 4: Click "Exploit" to run the attack.
  Step 5: Check the output below for response or success.
  
  Note: This vulnerability does not return visible output on success. 
  Use a blind command like 'touch /tmp/tested' and check the file on the target, 
  or use a curl/reverse shell payload to confirm the exploit worked.`;

    const sourceLink = "https://nvd.nist.gov/vuln/detail/CVE-2022-22963"; // Official CVE entry with technical details and severity rating
    const tutorial = "https://www.cyberkendra.com/2022/03/rce-0-day-exploit-found-in-spring-cloud.html"; // External write-up explaining how the vulnerability works and how to exploit it
    const dependencies = ["python3"];

    // Set up form fields with default values
    const form = useForm({
        initialValues: {
            targetIP: "",
            targetPort: 8080,
            command: "id",
        },
    });

    // Check if Python is available on the system
    useEffect(() => {
        checkAllCommandsAvailability(dependencies)
            .then((isAvailable) => {
                setIsCommandAvailable(isAvailable);
                setOpened(!isAvailable);
                setLoadingModal(false);
            })
            .catch((error) => {
                console.error("An error occurred:", error);
                setLoadingModal(false);
            });
    }, []);

    // Append command output or special 500 notice
    const handleProcessData = useCallback((data: string) => {
        let updatedOutput = data;
        if (data.includes("HTTP Response code: 500")) {
            updatedOutput += `
  
  [!] Note: The server responded with HTTP 500.
  This does not always mean failure â€” the command may have still executed.
  Please check the target manually or use a blind payload to confirm success.`;
        }
        setOutput((prevOutput) => prevOutput + "\n" + updatedOutput);
    }, []);

    // Handle completion or termination of the process
    const handleProcessTermination = useCallback(
        ({ code, signal }: { code: number; signal: number }) => {
            if (code === 0) {
                handleProcessData("\nProcess completed successfully.");
            } else if (signal === 15) {
                handleProcessData("\nProcess was manually terminated.");
            } else {
                handleProcessData(`\nProcess terminated with exit code: ${code} and signal code: ${signal}`);
            }

            setPid("");
            setLoading(false);
            setAllowSave(true);
            setHasSaved(false);
        },
        [handleProcessData]
    );

    // Run the exploit with provided input
    const onSubmit = async (values: FormValuesType) => {
        setLoading(true);
        setAllowSave(false);

        const args = ["./exploits/cve-2022-22963.py", values.targetIP, `${values.targetPort}`, values.command];

        CommandHelper.runCommandGetPidAndOutput("python3", args, handleProcessData, handleProcessTermination)
            .then(({ output, pid }) => {
                setOutput(output);
                setPid(pid);
            })
            .catch((error) => {
                setOutput(error.message);
                setLoading(false);
                setAllowSave(true);
            });
    };

    const clearOutput = useCallback(() => {
        setOutput("");
        setHasSaved(false);
        setAllowSave(false);
    }, []);

    const handleSaveComplete = () => {
        setHasSaved(true);
        setAllowSave(false);
    };

    return (
        <RenderComponent
            title={title}
            description={description}
            steps={steps}
            tutorial={tutorial}
            sourceLink={sourceLink}
        >
            {!loadingModal && (
                <InstallationModal
                    isOpen={opened}
                    setOpened={setOpened}
                    feature_description={description}
                    dependencies={dependencies}
                />
            )}
            <form onSubmit={form.onSubmit(onSubmit)}>
                <LoadingOverlay visible={loading} />
                <Stack>
                    {LoadingOverlayAndCancelButton(loading, pid)}
                    <TextInput label={"Target IP"} required {...form.getInputProps("targetIP")} />
                    <NumberInput label={"Target Port"} required {...form.getInputProps("targetPort")} />
                    <TextInput
                        label={"Command to Execute (e.g. id, whoami, touch /tmp/tested)"}
                        required
                        {...form.getInputProps("command")}
                    />
                    <Button type={"submit"}>Exploit</Button>
                    {SaveOutputToTextFile_v2(output, allowSave, hasSaved, handleSaveComplete)}
                    <ConsoleWrapper output={output} clearOutputCallback={clearOutput} />
                </Stack>
            </form>
        </RenderComponent>
    );
}

export default CVE202222963;
