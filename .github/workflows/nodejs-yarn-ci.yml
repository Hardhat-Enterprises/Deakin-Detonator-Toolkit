# GitHub Actions Workflow for CI/CD Pipeline
# This workflow is triggered on pushes and pull requests to the 'main' and 'dev' branches.

# More info:
#   github actions runner images        -> https://github.com/actions/runner-images/blob/main/README.md
#   yarn install                        -> https://classic.yarnpkg.com/en/docs/cli/install
#   actions/checkout                    -> https://github.com/actions/checkout
#   actions/setup-node                  -> https://github.com/actions/setup-node
#   syntax                              -> https://docs.github.com/en/actions/writing-workflows/

name: node.js CI

on:
    push:
        branches: [main, dev] # Triggers the workflow on PUSHES to 'main' and 'dev'
    pull_request:
        branches: [main, dev] # Triggers the workflow on PULL REQUESTS targeting 'main' and 'dev'

jobs:
    # Check dependency consistency and setup
    dependencies:
        # Set up job
        runs-on: ubuntu-latest
        timeout-minutes: 30 # Stop job if it runs longer than 30 minutes, default 360

        # Strategy to run this job in parallel with different Node.js versions
        strategy:
            matrix:
                node-version: [20.x] # Tests against alternating Node.js version(s) specified
        steps:
            # Step 1. Set up actions for checking out the repository
            - name: Get actions for checking out repo
              uses: actions/checkout@v4

            # Step 2. Set up the Node.js environment with the specified version
            - name: Set up image runner environment
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ matrix.node-version }} # Use the specified matrix version of Node.js
                  cache: yarn # enables caching yarn dependencies (throws error if yarn.lock not found) to speed up test runs

            # Step 3. Install project dependencies defined in yarn.lock file and prevents changing/updates to yarn.lock file
            - name: Install and ensure consistency of project dependencies from frozen lock file
              run: yarn install --frozen-lockfile

    # Style check job - Linting
    style:
        # Set up job
        runs-on: ubuntu-latest
        timeout-minutes: 30 # Stop job if it runs longer than 30 minutes, default 360
        needs: dependencies # Ensure this job only runs after the 'dependencies' job is successful
        steps:
            # Step 1
            - name: Get actions for checking out repo
              uses: actions/checkout@v4

            # Step 2
            - name: Install dependencies on image runner
              run: yarn install --frozen-lockfile

            # Step 3
            - name: Run style check using prettier --check defined in package.json
              run: yarn run style

    # Application build job
    build:
        # Set up job
        runs-on: ubuntu-latest
        timeout-minutes: 30 # Stop job if it runs longer than 30 minutes, default 360
        needs: dependencies # Ensure this job only runs after the 'dependencies' job is successful
        steps:
            # Step 1
            - name: Get actions for checking out repo
              uses: actions/checkout@v4

            # Step 2
            - name: Install dependencies on image runner
            - run: yarn install --frozen-lockfile

            # Step 3
            - run: yarn run build # Build the project
            # TODO: add run tests here later to run using built system

    # General tests
    # Note: each job runs new image. Tests below are not run on built system, only valid after 'build' job, and can't reference tests that use running application
    test:
        # Set up job
        runs-on: ubuntu-latest
        timeout-minutes: 30 # Stop job if it runs longer than 30 minutes, default 360
        needs: [dependencies, build] # Ensures this job only runs after the 'dependencies' and 'build' jobs are successful
        steps:
            # Step 1
            - name: Get actions for checking out repo
              uses: actions/checkout@v4

            # Step 2
            - name: Install dependencies on image runner
              run: yarn install --frozen-lockfile

            # Step 3
            - name: Run test scripts from package.json
              run: yarn run test

    # Security tests
    security_test:
        runs-on: ubuntu-latest
        timeout-minutes: 30 # Stop job if it runs longer than 30 minutes, default 360
        needs: dependencies # Ensure this job only runs after the 'dependencies' job is successful
        steps:
            - name: Get actions for checking out repo
              uses: actions/checkout@v4

            # Set the current date to match the pre-existing cache key generated by trivy-update.yml
            - name: Set current date
              id: date
              run: echo "date=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT

            # Attempt to restore the Trivy cache
            - name: Restore Trivy Cache
              id: cache
              uses: actions/cache@v4
              with:
                  path: ${{ github.workspace }}/.cache/trivy
                  key: cache-trivy-${{ steps.date.outputs.date }}
                  restore-keys: |
                      cache-trivy-${{ steps.date.outputs.date }}

            # Set environment to skip database updates if the cache is restored
            - name: Set TRIVY_SKIP_DB_UPDATE environment variable
              if: steps.cache.outputs.cache-hit == 'true'
              run: echo "TRIVY_SKIP_DB_UPDATE=true" >> $GITHUB_ENV

            # Set environment to skip Java database updates if the cache is restored
            - name: Set TRIVY_SKIP_JAVA_DB_UPDATE environment variable
              if: steps.cache.outputs.cache-hit == 'true'
              run: echo "TRIVY_SKIP_JAVA_DB_UPDATE=true" >> $GITHUB_ENV

            # Backup mechanism - Trivy can cause a fatal error if the cache is missing when attempting to skip DB update.
            # If the cache is not found, the required databases will be manually downloaded and extracted to prevent errors.

            - name: Download and Extract Trivy DB (on cache miss)
              if: steps.cache.outputs.cache-hit != 'true'
              run: |
                  mkdir -p $GITHUB_WORKSPACE/.cache/trivy/db
                  oras pull ghcr.io/aquasecurity/trivy-db:2
                  tar -xzf db.tar.gz -C $GITHUB_WORKSPACE/.cache/trivy/db
                  rm db.tar.gz

            - name: Download and Extract Java DB (on cache miss)
              if: steps.cache.outputs.cache-hit != 'true'
              run: |
                  mkdir -p $GITHUB_WORKSPACE/.cache/trivy/java-db
                  oras pull ghcr.io/aquasecurity/trivy-java-db:1
                  tar -xzf javadb.tar.gz -C $GITHUB_WORKSPACE/.cache/trivy/java-db
                  rm javadb.tar.gz

            # Vulnerability scanning
            - name: Run Trivy vulnerability scanner in repo mode
              uses: aquasecurity/trivy-action@0.28.0
              with:
                  scan-type: "fs"
                  ignore-unfixed: true
                  format: "table"
                  severity: "HIGH,CRITICAL"
                  exit-code: 1
              env:
                  TRIVY_SKIP_DB_UPDATE: ${{ env.TRIVY_SKIP_DB_UPDATE }}
                  TRIVY_SKIP_JAVA_DB_UPDATE: ${{ env.TRIVY_SKIP_JAVA_DB_UPDATE }}

            - name: Save updated Trivy Cache (on cache miss)
              if: steps.cache.outputs.cache-hit != 'true'
              uses: actions/cache/save@v4
              with:
                  path: ${{ github.workspace }}/.cache/trivy
                  key: cache-trivy-${{ steps.date.outputs.date }} # Cache key based on the current date

              # Secrets scan
            - name: Run TruffleHog scan
              run: |
                  docker run --rm -v "$PWD:/pwd" trufflesecurity/trufflehog:latest github \
                  --repo https://github.com/Hardhat-Enterprises/Deakin-Detonator-Toolkit \
                  --only-verified
